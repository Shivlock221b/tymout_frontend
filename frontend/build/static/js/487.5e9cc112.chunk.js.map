{"version":3,"file":"static/js/487.5e9cc112.chunk.js","mappings":"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","sources":["services/settingsService.js","components/settings/ProfileSettings.js","hooks/queries/useSettingsQueries.js","components/settings/AccountSettings.js","components/settings/PrivacySettings.js","components/settings/NotificationPreferences.js","pages/SettingsPage.js"],"sourcesContent":["/**\n * Settings Service\n * \n * Following Single Responsibility Principle:\n * - This service is responsible for all settings-related API calls\n * - Each function handles a specific settings operation\n */\nimport axios from 'axios';\n\n// Configure axios client for user service\nconst userServiceClient = axios.create({\n  baseURL: process.env.REACT_APP_USER_SERVICE_URL || 'http://localhost:3001', // User service runs on port 3001\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercept requests to add auth token\nuserServiceClient.interceptors.request.use(\n  config => {\n    console.log('API Request Config:', { url: config.url, method: config.method });\n    \n    // Extract token from 'auth-storage' in localStorage\n    const authStorage = localStorage.getItem('auth-storage');\n    let token = null;\n    if (authStorage) {\n      try {\n        const parsed = JSON.parse(authStorage);\n        token = parsed.state?.token;\n        console.log('Found auth token:', token ? 'Token exists' : 'No token');\n      } catch (e) {\n        console.error('Error parsing auth storage:', e);\n      }\n    } else {\n      console.warn('No auth-storage found in localStorage');\n    }\n    \n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else {\n      console.warn('No token available for request authentication');\n    }\n    \n    return config;\n  },\n  error => {\n    console.error('Request interceptor error:', error);\n    return Promise.reject(error);\n  }\n);\n\nconst settingsService = {\n  /**\n   * Update profile settings\n   * @param {Object} profileData - Profile settings data\n   * @returns {Promise<Object>} Updated profile data\n   */\n  updateProfileSettings: async (profileData) => {\n    try {\n      console.log('Calling updateProfileSettings with data:', profileData);\n      \n      // Make a real API call to update profile settings\n      // The correct endpoint is /user/profile based on server.js configuration\n      const response = await userServiceClient.put('/user/profile', profileData);\n      \n      console.log('Profile update API response:', response);\n      console.log('Profile update response data:', response.data);\n      \n      // Store updated profile data in localStorage for immediate access\n      // This ensures the data persists even if the page is refreshed\n      try {\n        const currentUser = JSON.parse(localStorage.getItem('user-data') || '{}');\n        const updatedUser = { ...currentUser, ...profileData };\n        localStorage.setItem('user-data', JSON.stringify(updatedUser));\n        console.log('Updated user data in localStorage');\n      } catch (e) {\n        console.error('Error updating localStorage:', e);\n      }\n      \n      return response.data.data || response.data;\n    } catch (error) {\n      console.error('Error updating profile settings:', error);\n      console.error('Error details:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  \n  /**\n   * Update account settings\n   * @param {Object} accountData - Account settings data\n   * @returns {Promise<Object>} Updated account data\n   */\n  updateAccountSettings: async (accountData) => {\n    try {\n      // Make a real API call to update account settings\n      const response = await userServiceClient.put('/user/account', accountData);\n      console.log('Account update response:', response.data);\n      \n      return response.data.data || response.data;\n    } catch (error) {\n      console.error('Error updating account settings:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Update privacy settings\n   * @param {Object} privacyData - Privacy settings data\n   * @returns {Promise<Object>} Updated privacy data\n   */\n  updatePrivacySettings: async (privacyData) => {\n    try {\n      // Make a real API call to update privacy settings\n      const response = await userServiceClient.put('/user/preferences', privacyData);\n      console.log('Privacy update response:', response.data);\n      \n      return response.data.data || response.data;\n    } catch (error) {\n      console.error('Error updating privacy settings:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Update notification settings\n   * @param {Object} notificationData - Notification settings data\n   * @returns {Promise<Object>} Updated notification data\n   */\n  updateNotificationSettings: async (notificationData) => {\n    try {\n      // Make a real API call to update notification settings\n      const response = await userServiceClient.put('/user/preferences', notificationData);\n      console.log('Notification update response:', response.data);\n      \n      return response.data.data || response.data;\n    } catch (error) {\n      console.error('Error updating notification settings:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Upload profile image\n   * @param {File} imageFile - The image file to upload\n   * @returns {Promise<Object>} Updated user data with profile image URL\n   */\n  uploadProfileImage: async (imageFile) => {\n    try {\n      console.log('Uploading profile image:', imageFile.name, 'size:', imageFile.size, 'type:', imageFile.type);\n      \n      // Create form data for file upload\n      const formData = new FormData();\n      formData.append('profileImage', imageFile, imageFile.name);\n      \n      // Important: Do NOT set Content-Type header manually\n      // Let axios set it automatically with the correct boundary\n      const config = {\n        headers: {\n          // No Content-Type header here\n        },\n        timeout: 30000 // Longer timeout for file uploads\n      };\n      \n      // Make API call to upload the image\n      const response = await userServiceClient.post('/user/profile/image', formData, config);\n      console.log('Upload response:', response.data);\n      \n      return response.data.data;\n    } catch (error) {\n      console.error('Error uploading profile image:', error);\n      throw error;\n    }\n  }\n};\n\nexport default settingsService;\n","import React, { useState, useEffect } from 'react';\nimport { useUpdateProfileSettings, useUploadProfileImage } from '../../hooks/queries/useSettingsQueries';\n\n// List of available cities - same as in onboarding\nconst CITIES = [\"Agra\", \"Gurugram\"];\n\n// Single Responsibility Principle - this component only handles profile settings\nconst ProfileSettings = ({ user }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    bio: '',\n    location: '',\n    interests: [],\n    profileImage: ''\n  });\n  const [availableInterests, setAvailableInterests] = useState([\n    'hiking', 'photography', 'cooking', 'reading', 'travel', 'music', \n    'movies', 'art', 'sports', 'technology', 'gaming', 'fitness', \n    'yoga', 'meditation', 'dancing', 'writing', 'fashion', 'food'\n  ]);\n  const [newInterest, setNewInterest] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Use React Query mutations for saving settings and uploading images\n  const updateProfile = useUpdateProfileSettings();\n  const uploadProfileImage = useUploadProfileImage();\n\n  useEffect(() => {\n    // In a real application, fetch user data from API\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        bio: user.bio || '',\n        location: user.location || '',\n        interests: user.interests || [],\n        profileImage: user.profileImage || ''\n      });\n    }\n  }, [user]);\n\n  const handleChange = (e) => {\n    const { name, value, type } = e.target;\n    \n    if (type === 'file') {\n      const file = e.target.files[0];\n      if (file) {\n        // Upload the file to the server\n        handleImageUpload(file);\n      }\n    } else {\n      setFormData(prevData => ({\n        ...prevData,\n        [name]: value\n      }));\n    }\n  };\n  \n  // Handle image upload\n  const handleImageUpload = (file) => {\n    // Show preview immediately for better UX\n    const imageUrl = URL.createObjectURL(file);\n    setFormData(prevData => ({\n      ...prevData,\n      profileImage: imageUrl\n    }));\n    \n    // Upload to server\n    uploadProfileImage.mutate(file, {\n      onSuccess: (data) => {\n        // Update form data with the real URL from the server\n        setFormData(prevData => ({\n          ...prevData,\n          profileImage: data.profileImage\n        }));\n        setSuccessMessage('Profile image uploaded successfully!');\n        setTimeout(() => setSuccessMessage(''), 3000);\n      },\n      onError: (error) => {\n        console.error('Error uploading profile image:', error);\n        // Revert to previous state if upload fails\n        setFormData(prevData => ({\n          ...prevData,\n          profileImage: user?.profileImage || ''\n        }));\n      }\n    });\n  };\n\n  const addInterest = () => {\n    if (newInterest && !formData.interests.includes(newInterest)) {\n      setFormData(prevData => ({\n        ...prevData,\n        interests: [...prevData.interests, newInterest]\n      }));\n      setNewInterest('');\n    }\n  };\n\n  const removeInterest = (interest) => {\n    setFormData(prevData => ({\n      ...prevData,\n      interests: prevData.interests.filter(item => item !== interest)\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Log the form data being submitted\n    console.log('Submitting profile data:', formData);\n    \n    // Ensure we're sending the right fields in the correct format\n    const profileDataToSubmit = {\n      name: formData.name,\n      bio: formData.bio,\n      location: formData.location,\n      interests: formData.interests\n      // Don't include profileImage as it's handled separately\n    };\n    \n    console.log('Formatted profile data for submission:', profileDataToSubmit);\n    \n    // Use React Query mutation to save settings\n    updateProfile.mutate(profileDataToSubmit, {\n      onSuccess: (data) => {\n        // Log the successful response\n        console.log('Profile update successful, response:', data);\n        \n        // Show success message\n        setSuccessMessage('Profile updated successfully!');\n        setTimeout(() => setSuccessMessage(''), 3000);\n      },\n      onError: (error) => {\n        console.error('Error updating profile:', error);\n        setSuccessMessage(`Error: ${error.message || 'Failed to update profile'}`);\n        setTimeout(() => setSuccessMessage(''), 5000);\n      }\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"overflow-x-hidden\">\n      {successMessage && (\n        <div className=\"mb-4 p-2 bg-green-100 text-green-700 rounded\">\n          {successMessage}\n        </div>\n      )}\n      \n      <div className=\"space-y-6\">\n        {/* Profile Image */}\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">Profile Image</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">Upload a profile picture to personalize your account.</p>\n          \n          <div className=\"mt-4 flex items-center space-x-4\">\n            <div className=\"relative\">\n              {formData.profileImage ? (\n                <div className=\"relative\">\n                  <img \n                    src={formData.profileImage} \n                    alt=\"Profile preview\" \n                    className=\"h-24 w-24 rounded-full object-cover border-2 border-gray-200\"\n                  />\n                  {uploadProfileImage.isPending && (\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-40 rounded-full\">\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"h-24 w-24 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-800 text-xl font-bold border-2 border-gray-200\">\n                  {formData.name ? formData.name.charAt(0).toUpperCase() : 'U'}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex flex-col space-y-2\">\n              <label \n                htmlFor=\"profile-image\" \n                className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${uploadProfileImage.isPending ? 'bg-indigo-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 cursor-pointer'} focus:outline-none`}\n              >\n                {uploadProfileImage.isPending ? 'Uploading...' : 'Upload Image'}\n                <input \n                  id=\"profile-image\" \n                  name=\"profileImage\" \n                  type=\"file\" \n                  accept=\"image/*\" \n                  onChange={handleChange}\n                  disabled={uploadProfileImage.isPending}\n                  className=\"sr-only\"\n                />\n              </label>\n              {formData.profileImage && (\n                <button\n                  type=\"button\"\n                  onClick={() => setFormData(prev => ({ ...prev, profileImage: '' }))}\n                  className=\"inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none\"\n                >\n                  Remove\n                </button>\n              )}\n              <p className=\"text-xs text-gray-500\">JPG, PNG or GIF. Max size 2MB.</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Personal Information */}\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">Personal Information</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">Update your basic profile information.</p>\n          \n          <div className=\"mt-6 grid grid-cols-1 gap-y-6 gap-x-2 sm:gap-x-4 sm:grid-cols-6\">\n            <div className=\"col-span-1 sm:col-span-4\">\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                Full name\n              </label>\n              <div className=\"mt-1\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                />\n              </div>\n            </div>\n\n            <div className=\"col-span-1 sm:col-span-6\">\n              <label htmlFor=\"bio\" className=\"block text-sm font-medium text-gray-700\">\n                Bio\n              </label>\n              <div className=\"mt-1\">\n                <textarea\n                  id=\"bio\"\n                  name=\"bio\"\n                  rows={3}\n                  value={formData.bio}\n                  onChange={handleChange}\n                  className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                  placeholder=\"Tell us about yourself\"\n                />\n              </div>\n              <p className=\"mt-2 text-sm text-gray-500\">Brief description for your profile.</p>\n            </div>\n\n            <div className=\"col-span-1 sm:col-span-4\">\n              <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700\">\n                City\n              </label>\n              <div className=\"mt-1\">\n                <select\n                  name=\"location\"\n                  id=\"location\"\n                  value={formData.location}\n                  onChange={handleChange}\n                  className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                >\n                  <option value=\"\" disabled>Select your city</option>\n                  {CITIES.map(city => (\n                    <option key={city} value={city}>{city}</option>\n                  ))}\n                </select>\n              </div>\n              <p className=\"mt-2 text-sm text-gray-500\">Your current city helps us show relevant events.</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Interests */}\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">Interests</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">Select interests to help us find matches for you.</p>\n          \n          <div className=\"mt-2 max-w-full overflow-hidden\">\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {formData.interests.map((interest, index) => (\n                <span \n                  key={index} \n                  className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800\"\n                >\n                  {interest}\n                  <button\n                    type=\"button\"\n                    onClick={() => removeInterest(interest)}\n                    className=\"ml-1.5 h-4 w-4 rounded-full flex items-center justify-center text-indigo-400 hover:bg-indigo-200 hover:text-indigo-500 focus:outline-none\"\n                  >\n                    <svg className=\"h-3 w-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </span>\n              ))}\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row\">\n              <div className=\"flex-grow mb-2 sm:mb-0\">\n                <select\n                  value={newInterest}\n                  onChange={(e) => setNewInterest(e.target.value)}\n                  className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                >\n                  <option value=\"\">Select an interest</option>\n                  {availableInterests\n                    .filter(interest => !formData.interests.includes(interest))\n                    .map((interest, index) => (\n                      <option key={index} value={interest}>\n                        {interest.charAt(0).toUpperCase() + interest.slice(1)}\n                      </option>\n                    ))}\n                </select>\n              </div>\n              <button\n                type=\"button\"\n                onClick={addInterest}\n                className=\"sm:ml-2 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n              >\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"pt-5\">\n        <div className=\"flex justify-end\">\n          <button\n            type=\"button\"\n            className=\"bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            disabled={updateProfile.isPending}\n            className={`ml-3 inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white \n              ${updateProfile.isPending ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700'} \n              focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\n          >\n            {updateProfile.isPending ? 'Saving...' : 'Save'}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default ProfileSettings;\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport settingsService from '../../services/settingsService';\n\n/**\n * Custom hook for updating profile settings\n * Following Single Responsibility Principle and Interface Segregation Principle\n * \n * @returns {Object} - React Query mutation object for profile settings\n */\nexport const useUpdateProfileSettings = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (profileData) => settingsService.updateProfileSettings(profileData),\n    \n    onSuccess: (data) => {\n      // Update the profile data in the cache\n      queryClient.setQueryData(['profile'], oldData => {\n        if (!oldData) return oldData;\n        return { ...oldData, ...data };\n      });\n      \n      // Invalidate the profile query to ensure fresh data on next fetch\n      queryClient.invalidateQueries({ queryKey: ['profile'] });\n    }\n  });\n};\n\n/**\n * Custom hook for updating account settings\n * \n * @returns {Object} - React Query mutation object for account settings\n */\nexport const useUpdateAccountSettings = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (accountData) => settingsService.updateAccountSettings(accountData),\n    \n    onSuccess: (data) => {\n      // Update any potentially related data in cache\n      queryClient.invalidateQueries({ queryKey: ['profile'] });\n      queryClient.invalidateQueries({ queryKey: ['user'] });\n    }\n  });\n};\n\n/**\n * Custom hook for updating privacy settings\n * \n * @returns {Object} - React Query mutation object for privacy settings\n */\nexport const useUpdatePrivacySettings = () => {\n  return useMutation({\n    mutationFn: (privacyData) => settingsService.updatePrivacySettings(privacyData)\n  });\n};\n\n/**\n * Custom hook for updating notification settings\n * \n * @returns {Object} - React Query mutation object for notification settings\n */\nexport const useUpdateNotificationSettings = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (notificationData) => \n      settingsService.updateNotificationSettings(notificationData),\n    \n    onSuccess: () => {\n      // Invalidate notifications queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    }\n  });\n};\n\n/**\n * Custom hook for uploading profile image\n * \n * @returns {Object} - React Query mutation object for profile image upload\n */\nexport const useUploadProfileImage = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (imageFile) => settingsService.uploadProfileImage(imageFile),\n    \n    onSuccess: (data) => {\n      // Update the profile data in the cache\n      queryClient.setQueryData(['profile'], oldData => {\n        if (!oldData) return oldData;\n        return { ...oldData, profileImage: data.profileImage };\n      });\n      \n      // Update the user data in the cache\n      queryClient.setQueryData(['user'], oldData => {\n        if (!oldData) return oldData;\n        return { ...oldData, profileImage: data.profileImage };\n      });\n      \n      // Invalidate queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: ['profile'] });\n      queryClient.invalidateQueries({ queryKey: ['user'] });\n    }\n  });\n};\n","import React, { useState } from 'react';\n\n// Single Responsibility Principle - this component only handles account settings\nconst AccountSettings = ({ user }) => {\n  const [formData, setFormData] = useState({\n    email: user?.email || '',\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [saving, setSaving] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n\n    // Clear errors when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    // Email validation\n    if (formData.email && !/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n    \n    // Password validation\n    if (formData.newPassword) {\n      if (formData.newPassword.length < 8) {\n        newErrors.newPassword = 'Password must be at least 8 characters';\n      }\n      \n      if (formData.newPassword !== formData.confirmPassword) {\n        newErrors.confirmPassword = 'Passwords do not match';\n      }\n      \n      if (!formData.currentPassword) {\n        newErrors.currentPassword = 'Current password is required';\n      }\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleUpdateEmail = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setSaving(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setSuccessMessage('Email updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error updating email:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleUpdatePassword = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setSaving(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Clear password fields\n      setFormData(prev => ({\n        ...prev,\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      }));\n      \n      setSuccessMessage('Password updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error updating password:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {successMessage && (\n        <div className=\"p-2 bg-green-100 text-green-700 rounded\">\n          {successMessage}\n        </div>\n      )}\n      \n      {/* Email Address */}\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900\">Email Address</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">Update your email address.</p>\n        \n        <form onSubmit={handleUpdateEmail} className=\"mt-5 sm:flex sm:items-center\">\n          <div className=\"w-full sm:max-w-xs\">\n            <label htmlFor=\"email\" className=\"sr-only\">Email</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              className={`shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md ${\n                errors.email ? 'border-red-300' : ''\n              }`}\n              placeholder=\"you@example.com\"\n            />\n            {errors.email && <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>}\n          </div>\n          <button\n            type=\"submit\"\n            disabled={saving || !formData.email}\n            className=\"mt-3 w-full inline-flex items-center justify-center px-4 py-2 border border-transparent shadow-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n          >\n            {saving ? 'Updating...' : 'Update Email'}\n          </button>\n        </form>\n      </div>\n      \n      {/* Password */}\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900\">Password</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">Update your password.</p>\n        \n        <form onSubmit={handleUpdatePassword} className=\"mt-5 space-y-4\">\n          <div>\n            <label htmlFor=\"currentPassword\" className=\"block text-sm font-medium text-gray-700\">\n              Current Password\n            </label>\n            <input\n              type=\"password\"\n              name=\"currentPassword\"\n              id=\"currentPassword\"\n              value={formData.currentPassword}\n              onChange={handleChange}\n              className={`mt-1 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md ${\n                errors.currentPassword ? 'border-red-300' : ''\n              }`}\n            />\n            {errors.currentPassword && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.currentPassword}</p>\n            )}\n          </div>\n          \n          <div>\n            <label htmlFor=\"newPassword\" className=\"block text-sm font-medium text-gray-700\">\n              New Password\n            </label>\n            <input\n              type=\"password\"\n              name=\"newPassword\"\n              id=\"newPassword\"\n              value={formData.newPassword}\n              onChange={handleChange}\n              className={`mt-1 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md ${\n                errors.newPassword ? 'border-red-300' : ''\n              }`}\n            />\n            {errors.newPassword && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.newPassword}</p>\n            )}\n          </div>\n          \n          <div>\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n              Confirm New Password\n            </label>\n            <input\n              type=\"password\"\n              name=\"confirmPassword\"\n              id=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={handleChange}\n              className={`mt-1 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md ${\n                errors.confirmPassword ? 'border-red-300' : ''\n              }`}\n            />\n            {errors.confirmPassword && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.confirmPassword}</p>\n            )}\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={saving || !formData.newPassword}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            >\n              {saving ? 'Updating...' : 'Update Password'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountSettings;\n","import React, { useState } from 'react';\n\n// Single Responsibility Principle - this component only handles privacy settings\nconst PrivacySettings = ({ user }) => {\n  const [settings, setSettings] = useState({\n    profileVisibility: user?.privacy?.profileVisibility || 'public',\n    rsvpVisibility: user?.privacy?.rsvpVisibility || 'friends',\n    locationSharing: user?.privacy?.locationSharing || false,\n    activityStatus: user?.privacy?.activityStatus || true\n  });\n  const [saving, setSaving] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleRadioChange = (e) => {\n    const { name, value } = e.target;\n    setSettings(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleToggleChange = (name) => {\n    setSettings(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSaving(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setSuccessMessage('Privacy settings updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error updating privacy settings:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Toggle Switch Component - reusable UI element\n  const ToggleSwitch = ({ enabled, onChange, label, description }) => {\n    return (\n      <div className=\"flex items-start\">\n        <div className=\"flex items-center h-5\">\n          <button\n            type=\"button\"\n            className={`${\n              enabled ? 'bg-indigo-600' : 'bg-gray-200'\n            } relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\n            role=\"switch\"\n            aria-checked={enabled}\n            onClick={onChange}\n          >\n            <span\n              aria-hidden=\"true\"\n              className={`${\n                enabled ? 'translate-x-5' : 'translate-x-0'\n              } pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200`}\n            />\n          </button>\n        </div>\n        <div className=\"ml-3 text-sm\">\n          <label className=\"font-medium text-gray-700\">{label}</label>\n          {description && <p className=\"text-gray-500\">{description}</p>}\n        </div>\n      </div>\n    );\n  };\n\n  // Radio Group Component - reusable UI element\n  const RadioGroup = ({ name, value, onChange, options, label, description }) => {\n    return (\n      <div>\n        <label className=\"text-base font-medium text-gray-700\">{label}</label>\n        {description && <p className=\"text-sm text-gray-500\">{description}</p>}\n        <fieldset className=\"mt-4\">\n          <legend className=\"sr-only\">{label}</legend>\n          <div className=\"space-y-4\">\n            {options.map((option) => (\n              <div key={option.value} className=\"flex items-center\">\n                <input\n                  id={`${name}-${option.value}`}\n                  name={name}\n                  type=\"radio\"\n                  value={option.value}\n                  checked={value === option.value}\n                  onChange={onChange}\n                  className=\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300\"\n                />\n                <label htmlFor={`${name}-${option.value}`} className=\"ml-3 block text-sm font-medium text-gray-700\">\n                  {option.label}\n                </label>\n              </div>\n            ))}\n          </div>\n        </fieldset>\n      </div>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-8\">\n      {successMessage && (\n        <div className=\"p-2 bg-green-100 text-green-700 rounded\">\n          {successMessage}\n        </div>\n      )}\n      \n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900\">Privacy Settings</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">Control who can see your information and activities.</p>\n      </div>\n\n      <RadioGroup\n        name=\"profileVisibility\"\n        value={settings.profileVisibility}\n        onChange={handleRadioChange}\n        label=\"Profile Visibility\"\n        description=\"Control who can view your profile\"\n        options={[\n          { value: 'public', label: 'Public - Anyone can view your profile' },\n          { value: 'friends', label: 'Friends Only - Only people you connect with can view your profile' },\n          { value: 'private', label: 'Private - Your profile is hidden from everyone' }\n        ]}\n      />\n\n      <RadioGroup\n        name=\"rsvpVisibility\"\n        value={settings.rsvpVisibility}\n        onChange={handleRadioChange}\n        label=\"RSVP Visibility\"\n        description=\"Control who can see your event RSVPs\"\n        options={[\n          { value: 'public', label: 'Public - Anyone can see which events you\\'re attending' },\n          { value: 'friends', label: 'Friends Only - Only people you connect with can see your RSVPs' },\n          { value: 'private', label: 'Private - Keep your RSVPs private' }\n        ]}\n      />\n\n      <div className=\"space-y-4\">\n        <ToggleSwitch\n          enabled={settings.locationSharing}\n          onChange={() => handleToggleChange('locationSharing')}\n          label=\"Location Sharing\"\n          description=\"Allow the app to use your location to find nearby events and people\"\n        />\n\n        <ToggleSwitch\n          enabled={settings.activityStatus}\n          onChange={() => handleToggleChange('activityStatus')}\n          label=\"Activity Status\"\n          description=\"Show others when you're active on the platform\"\n        />\n      </div>\n\n      <div className=\"pt-5\">\n        <div className=\"flex justify-end\">\n          <button\n            type=\"button\"\n            className=\"bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            disabled={saving}\n            className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            {saving ? 'Saving...' : 'Save'}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default PrivacySettings;\n","import React, { useState } from 'react';\n\n// Single Responsibility Principle - this component only handles notification preferences\nconst NotificationPreferences = ({ user }) => {\n  const [preferences, setPreferences] = useState({\n    email: {\n      newMatches: user?.notifications?.email?.newMatches || true,\n      messages: user?.notifications?.email?.messages || true,\n      eventReminders: user?.notifications?.email?.eventReminders || true,\n      eventUpdates: user?.notifications?.email?.eventUpdates || false,\n      weeklyDigest: user?.notifications?.email?.weeklyDigest || false\n    },\n    inApp: {\n      newMatches: user?.notifications?.inApp?.newMatches || true,\n      messages: user?.notifications?.inApp?.messages || true,\n      eventReminders: user?.notifications?.inApp?.eventReminders || true,\n      eventUpdates: user?.notifications?.inApp?.eventUpdates || true,\n      connectionRequests: user?.notifications?.inApp?.connectionRequests || true\n    }\n  });\n  const [saving, setSaving] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleToggleChange = (type, name) => {\n    setPreferences(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        [name]: !prev[type][name]\n      }\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSaving(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setSuccessMessage('Notification preferences updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      console.error('Error updating notification preferences:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // NotificationToggle Component - reusable UI element following Single Responsibility Principle\n  const NotificationToggle = ({ enabled, onChange, label }) => {\n    return (\n      <div className=\"flex items-center justify-between\">\n        <span className=\"flex-grow flex flex-col\">\n          <span className=\"text-sm font-medium text-gray-900\">{label}</span>\n        </span>\n        <button\n          type=\"button\"\n          className={`${\n            enabled ? 'bg-indigo-600' : 'bg-gray-200'\n          } relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\n          role=\"switch\"\n          aria-checked={enabled}\n          onClick={onChange}\n        >\n          <span className=\"sr-only\">Toggle {label}</span>\n          <span\n            aria-hidden=\"true\"\n            className={`${\n              enabled ? 'translate-x-5' : 'translate-x-0'\n            } pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200`}\n          />\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-8\">\n      {successMessage && (\n        <div className=\"p-2 bg-green-100 text-green-700 rounded\">\n          {successMessage}\n        </div>\n      )}\n      \n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900\">Notification Preferences</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">\n          Manage how you receive notifications from Tymout.\n        </p>\n      </div>\n\n      {/* Email Notifications */}\n      <div>\n        <h4 className=\"text-base font-medium text-gray-900\">Email Notifications</h4>\n        <p className=\"text-sm text-gray-500\">\n          Notifications sent to your email address.\n        </p>\n        <div className=\"mt-4 space-y-4\">\n          <NotificationToggle\n            enabled={preferences.email.newMatches}\n            onChange={() => handleToggleChange('email', 'newMatches')}\n            label=\"New Matches\"\n          />\n          <NotificationToggle\n            enabled={preferences.email.messages}\n            onChange={() => handleToggleChange('email', 'messages')}\n            label=\"New Messages\"\n          />\n          <NotificationToggle\n            enabled={preferences.email.eventReminders}\n            onChange={() => handleToggleChange('email', 'eventReminders')}\n            label=\"Event Reminders\"\n          />\n          <NotificationToggle\n            enabled={preferences.email.eventUpdates}\n            onChange={() => handleToggleChange('email', 'eventUpdates')}\n            label=\"Event Updates\"\n          />\n          <NotificationToggle\n            enabled={preferences.email.weeklyDigest}\n            onChange={() => handleToggleChange('email', 'weeklyDigest')}\n            label=\"Weekly Digest\"\n          />\n        </div>\n      </div>\n\n      {/* In-App Notifications */}\n      <div>\n        <h4 className=\"text-base font-medium text-gray-900\">In-App Notifications</h4>\n        <p className=\"text-sm text-gray-500\">\n          Notifications shown within the Tymout application.\n        </p>\n        <div className=\"mt-4 space-y-4\">\n          <NotificationToggle\n            enabled={preferences.inApp.newMatches}\n            onChange={() => handleToggleChange('inApp', 'newMatches')}\n            label=\"New Matches\"\n          />\n          <NotificationToggle\n            enabled={preferences.inApp.messages}\n            onChange={() => handleToggleChange('inApp', 'messages')}\n            label=\"New Messages\"\n          />\n          <NotificationToggle\n            enabled={preferences.inApp.eventReminders}\n            onChange={() => handleToggleChange('inApp', 'eventReminders')}\n            label=\"Event Reminders\"\n          />\n          <NotificationToggle\n            enabled={preferences.inApp.eventUpdates}\n            onChange={() => handleToggleChange('inApp', 'eventUpdates')}\n            label=\"Event Updates\"\n          />\n          <NotificationToggle\n            enabled={preferences.inApp.connectionRequests}\n            onChange={() => handleToggleChange('inApp', 'connectionRequests')}\n            label=\"Connection Requests\"\n          />\n        </div>\n      </div>\n\n      <div className=\"pt-5\">\n        <div className=\"flex justify-end\">\n          <button\n            type=\"button\"\n            className=\"bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            disabled={saving}\n            className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            {saving ? 'Saving...' : 'Save'}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default NotificationPreferences;\n","import React, { useState } from 'react';\nimport { useAuthStore } from '../stores/authStore';\nimport ProfileSettings from '../components/settings/ProfileSettings';\nimport AccountSettings from '../components/settings/AccountSettings';\nimport PrivacySettings from '../components/settings/PrivacySettings';\nimport NotificationPreferences from '../components/settings/NotificationPreferences';\n\n// Following Single Responsibility Principle - this component only handles the settings page layout\nconst SettingsPage = () => {\n  const user = useAuthStore(state => state.user);\n  const [activeTab, setActiveTab] = useState('profile');\n  \n  // Tabs configuration following Open/Closed principle - new tabs can be added without modifying existing code\n  const tabs = [\n    { id: 'profile', label: 'Profile' },\n    { id: 'account', label: 'Account' },\n    { id: 'privacy', label: 'Privacy' },\n    { id: 'notifications', label: 'Notifications' }\n  ];\n\n  // Tab content components mapping - follows Interface Segregation Principle\n  // Each tab component handles only what it needs to\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'profile':\n        return <ProfileSettings user={user} />;\n      case 'account':\n        return <AccountSettings user={user} />;\n      case 'privacy':\n        return <PrivacySettings user={user} />;\n      case 'notifications':\n        return <NotificationPreferences user={user} />;\n      default:\n        return <ProfileSettings user={user} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white overflow-x-hidden\">\n      <div className=\"max-w-7xl mx-auto py-6 px-2 sm:px-6 lg:px-8\">\n        <div className=\"px-2 py-6 sm:px-0\">\n          <div className=\"bg-white shadow sm:rounded-lg\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h2 className=\"text-lg font-medium text-gray-900\">Settings</h2>\n              <p className=\"mt-1 text-sm text-gray-500\">Manage your profile and account preferences</p>\n            </div>\n            \n            <div className=\"border-t border-gray-200\">\n              <div className=\"flex flex-wrap border-b\">\n                {tabs.map((tab) => (\n                  <button\n                    key={tab.id}\n                    className={`px-3 py-3 sm:px-4 sm:py-4 text-xs sm:text-sm font-medium whitespace-nowrap ${\n                      activeTab === tab.id\n                        ? 'border-b-2 border-indigo-500 text-indigo-600'\n                        : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                    onClick={() => setActiveTab(tab.id)}\n                  >\n                    {tab.label}\n                  </button>\n                ))}\n              </div>\n              \n              <div className=\"p-2 sm:p-4\">\n                {renderTabContent()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n"],"names":["userServiceClient","axios","create","baseURL","process","timeout","headers","interceptors","request","use","config","authStorage","localStorage","getItem","token","_parsed$state","JSON","parse","state","e","concat","error","Promise","reject","updateProfileSettings","async","response","put","profileData","currentUser","updatedUser","_objectSpread","setItem","stringify","data","updateAccountSettings","accountData","updatePrivacySettings","privacyData","updateNotificationSettings","notificationData","uploadProfileImage","formData","FormData","append","imageFile","name","post","CITIES","_ref","user","setFormData","useState","bio","location","interests","profileImage","availableInterests","setAvailableInterests","newInterest","setNewInterest","successMessage","setSuccessMessage","updateProfile","useUpdateProfileSettings","queryClient","useQueryClient","useMutation","mutationFn","settingsService","onSuccess","setQueryData","oldData","invalidateQueries","queryKey","useUploadProfileImage","useEffect","handleChange","value","type","target","file","files","handleImageUpload","prevData","imageUrl","URL","createObjectURL","mutate","setTimeout","onError","_jsxs","onSubmit","preventDefault","profileDataToSubmit","message","className","children","_jsx","src","alt","isPending","charAt","toUpperCase","htmlFor","id","accept","onChange","disabled","onClick","prev","rows","placeholder","map","city","interest","index","filter","item","removeInterest","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","includes","slice","addInterest","email","currentPassword","newPassword","confirmPassword","saving","setSaving","errors","setErrors","validateForm","newErrors","test","length","Object","keys","resolve","_user$privacy","_user$privacy2","_user$privacy3","_user$privacy4","settings","setSettings","profileVisibility","privacy","rsvpVisibility","locationSharing","activityStatus","handleRadioChange","handleToggleChange","ToggleSwitch","_ref2","enabled","label","description","role","RadioGroup","_ref3","options","option","checked","_user$notifications","_user$notifications$e","_user$notifications2","_user$notifications2$","_user$notifications3","_user$notifications3$","_user$notifications4","_user$notifications4$","_user$notifications5","_user$notifications5$","_user$notifications6","_user$notifications6$","_user$notifications7","_user$notifications7$","_user$notifications8","_user$notifications8$","_user$notifications9","_user$notifications9$","_user$notifications0","_user$notifications0$","preferences","setPreferences","newMatches","notifications","messages","eventReminders","eventUpdates","weeklyDigest","inApp","connectionRequests","NotificationToggle","SettingsPage","useAuthStore","activeTab","setActiveTab","tab","renderTabContent","ProfileSettings","AccountSettings","PrivacySettings","NotificationPreferences"],"sourceRoot":""}