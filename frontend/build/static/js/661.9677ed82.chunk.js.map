{"version":3,"file":"static/js/661.9677ed82.chunk.js","mappings":"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","sources":["message/services/chatApi.js","message/components/MessageBubble.js","message/components/MessageInput.js","message/components/MessageTypingIndicator.js","message/components/UserChatHeader.js","message/pages/MessageDetailPage.js","message/services/messageWebSocketService.js"],"sourcesContent":["import axios from 'axios';\n\n// Centralized axios instance for the one-on-one chat service\n// Use API gateway for all requests to maintain consistent routing\nconst API_BASE = process.env.REACT_APP_API_GATEWAY_URL || 'http://localhost:3000';\n\n// All chat endpoints will be under /api/chats path\nconst CHAT_ENDPOINT = `${API_BASE}/api/chats`;\n\nconsole.log('Chat API configured with endpoint:', CHAT_ENDPOINT);\n\nconst client = axios.create({\n  baseURL: CHAT_ENDPOINT,\n  withCredentials: true\n});\n\n/*\n-------------------------------------------------------------------\nchatApi – REST wrappers for one-on-one chat micro-service\n-------------------------------------------------------------------\nEach method returns the .data field directly for convenience.\n*/\n\nconst chatApi = {\n  // Fetch all chats for a user (chat previews)\n  getUserChats: async (userId) => {\n    const { data } = await client.get(`/user/${userId}`);\n    return data;\n  },\n\n  // Fetch a single chat (metadata + participants)\n  getChat: async (chatId) => {\n    const { data } = await client.get(`/${chatId}`);\n    return data;\n  },\n\n  // Fetch messages for a chat (supports pagination)\n  getMessages: async (chatId, { limit = 50, skip = 0 } = {}) => {\n    const { data } = await client.get(`/${chatId}/messages`, {\n      params: { limit, skip }\n    });\n    return data;\n  },\n\n  // Send a new message\n  sendMessage: async (payload) => {\n    // payload expects: { chatId, senderId, senderName, senderAvatar, text, replyTo?, clientMsgId? }\n    const { data } = await client.post('/message', payload);\n    return data;\n  },\n\n  // Mark all messages as read for a user in a chat\n  markAsRead: async (chatId, userId) => {\n    const { data } = await client.post(`/${chatId}/read`, { userId });\n    return data;\n  },\n\n  // Get chat preview with unread count\n  getChatPreview: async (chatId, userId) => {\n    const { data } = await client.get(`/${chatId}/preview`, { params: { userId } });\n    return data;\n  },\n\n  // Update chat block status\n  updateChatStatus: async (chatId, { isBlocked, blockedBy }) => {\n    const { data } = await client.patch(`/${chatId}/status`, { isBlocked, blockedBy });\n    return data;\n  },\n\n  // Create or fetch a direct chat between two users\n  startDirectChat: async (userAId, userBId, userAName, userBName, userAAvatar, userBAvatar) => {\n    const { data } = await client.post('/direct', { \n      userAId, \n      userBId,\n      userAName,\n      userBName,\n      userAAvatar,\n      userBAvatar\n    });\n    return data;\n  }\n};\n\nexport default chatApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow } from 'date-fns';\nimport { FaCheck, FaCheckDouble } from 'react-icons/fa';\n\n/**\n * MessageBubble Component\n * \n * Following Single Responsibility Principle:\n * - Only responsible for displaying a single message bubble\n * - Handles different states (own/received messages) and status indicators\n */\nconst MessageBubble = ({ message, isOwn, avatar }) => {\n  const content = message.content || message.text || '';\n  const timestamp = message.timestamp || message.createdAt || new Date().toISOString();\n  const status = message.status;\n  \n  // Format the timestamp to relative time\n  const formattedTime = formatDistanceToNow(new Date(timestamp), { addSuffix: true });\n  \n  // Get status icon based on message status (only for own messages)\n  const getStatusIcon = () => {\n    if (!isOwn) return null;\n    \n    switch (status) {\n      case 'sending':\n        return null; // No icon for sending\n      case 'sent':\n        return <FaCheck className=\"text-gray-400\" />;\n      case 'delivered':\n        return <FaCheckDouble className=\"text-gray-400\" />;\n      case 'read':\n        return <FaCheckDouble className=\"text-indigo-500\" />;\n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <div className={`flex items-end mb-1 w-full ${isOwn ? 'justify-end' : 'justify-start'}`}>  \n      {/* Avatar for other user */}\n      {!isOwn && avatar && (\n        <img\n          src={avatar || 'https://via.placeholder.com/32?text=U'}\n          alt=\"User avatar\"\n          className=\"w-8 h-8 rounded-full object-cover border border-gray-200 bg-gray-50 mr-2\"\n          onError={(e)=>{e.target.onerror=null;e.target.src='https://via.placeholder.com/32?text=U';}}\n        />\n      )}\n      \n      <div className={`rounded-lg px-3 py-2 text-sm break-words whitespace-pre-line relative max-w-[80%] ${isOwn ? 'chat-bubble-glass-own bg-gray-200 text-gray-900' : 'chat-bubble-glass bg-white text-gray-900'}`}>\n        {content}\n        <div className={`flex items-center text-xs mt-1 text-gray-600`}>\n          <span>{formattedTime}</span>\n          {getStatusIcon() && <span className=\"ml-1\">{getStatusIcon()}</span>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMessageBubble.propTypes = {\n  message: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    content: PropTypes.string,\n    text: PropTypes.string,\n    timestamp: PropTypes.string,\n    createdAt: PropTypes.string,\n    senderId: PropTypes.string,\n    status: PropTypes.oneOf(['sending', 'sent', 'delivered', 'read'])\n  }).isRequired,\n  isOwn: PropTypes.bool.isRequired,\n  avatar: PropTypes.string\n};\n\nexport default MessageBubble;\n","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { FaPaperPlane, FaSmile, FaPaperclip, FaMicrophone } from 'react-icons/fa';\n\n/**\n * MessageInput Component\n * \n * Following Single Responsibility Principle:\n * - Only responsible for handling message input and composition\n * - Manages typing events and input validation\n */\nconst MessageInput = ({ onSendMessage, onTyping, connectionStatus }) => {\n  const [message, setMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const inputRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  \n  // Focus input on component mount\n  useEffect(() => {\n    inputRef.current?.focus();\n    \n    return () => {\n      if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n    };\n  }, []);\n  \n  // Handle typing indicator\n  const handleTypingState = (isUserTyping) => {\n    // Only update if the state is changing\n    if (isUserTyping !== isTyping) {\n      setIsTyping(isUserTyping);\n      onTyping(isUserTyping);\n    }\n    \n    // Clear existing timeout\n    if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n    \n    // Set timeout to stop typing indicator after 2 seconds of inactivity\n    if (isUserTyping) {\n      typingTimeoutRef.current = setTimeout(() => {\n        setIsTyping(false);\n        onTyping(false);\n      }, 2000);\n    }\n  };\n  \n  // Handle input change\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n    handleTypingState(e.target.value.length > 0);\n  };\n  \n  // Handle message send\n  const handleSend = () => {\n    if (message.trim() && connectionStatus === 'connected') {\n      onSendMessage(message);\n      setMessage('');\n      handleTypingState(false);\n      inputRef.current?.focus();\n    }\n  };\n  \n  // Handle enter key press\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  \n  return (\n    <div className=\"flex items-center\">\n      {/* Attachment button */}\n      <button \n        className=\"p-2 text-gray-500 hover:text-indigo-600 transition\"\n        aria-label=\"Add attachment\"\n      >\n        <FaPaperclip />\n      </button>\n      \n      {/* Message input field */}\n      <div className=\"flex-1 mx-2\">\n        <textarea\n          ref={inputRef}\n          value={message}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          placeholder={connectionStatus === 'connected' ? \"Type a message...\" : \"Connecting...\"}\n          className=\"w-full border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none\"\n          rows={1}\n          disabled={connectionStatus !== 'connected'}\n        />\n      </div>\n      \n      {/* Emoji button */}\n      <button \n        className=\"p-2 text-gray-500 hover:text-indigo-600 transition mr-1\"\n        aria-label=\"Add emoji\"\n      >\n        <FaSmile />\n      </button>\n      \n      {/* Voice message button */}\n      <button \n        className=\"p-2 text-gray-500 hover:text-indigo-600 transition mr-1\"\n        aria-label=\"Record voice message\"\n      >\n        <FaMicrophone />\n      </button>\n      \n      {/* Send button */}\n      <button \n        onClick={handleSend}\n        disabled={!message.trim() || connectionStatus !== 'connected'}\n        className={`p-2 rounded-full ${\n          message.trim() && connectionStatus === 'connected'\n            ? 'bg-indigo-600 text-white hover:bg-indigo-700'\n            : 'bg-gray-200 text-gray-400 cursor-not-allowed'\n        } transition`}\n        aria-label=\"Send message\"\n      >\n        <FaPaperPlane />\n      </button>\n    </div>\n  );\n};\n\nMessageInput.propTypes = {\n  onSendMessage: PropTypes.func.isRequired,\n  onTyping: PropTypes.func.isRequired,\n  connectionStatus: PropTypes.oneOf(['connecting', 'connected', 'disconnected']).isRequired\n};\n\nMessageInput.defaultProps = {\n  connectionStatus: 'connecting'\n};\n\nexport default MessageInput;\n","import React from 'react';\n\n/**\n * MessageTypingIndicator Component\n * \n * Following Single Responsibility Principle:\n * - Only responsible for displaying the typing indicator animation\n */\nconst MessageTypingIndicator = () => {\n  return (\n    <div className=\"flex justify-start\">\n      <div className=\"bg-white border border-gray-200 px-4 py-2 rounded-xl\">\n        <div className=\"flex space-x-1\">\n          <div className=\"animate-bounce w-2 h-2 bg-gray-400 rounded-full\" style={{ animationDelay: '0ms' }}></div>\n          <div className=\"animate-bounce w-2 h-2 bg-gray-400 rounded-full\" style={{ animationDelay: '200ms' }}></div>\n          <div className=\"animate-bounce w-2 h-2 bg-gray-400 rounded-full\" style={{ animationDelay: '400ms' }}></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MessageTypingIndicator;\n","import React, { useState } from 'react';\nimport { FaArrowLeft, FaUser, FaStore } from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\n\n/**\n * UserChatHeader\n * Consistent with GroupHeader style used in myevents chat.\n * Props:\n *   user: { name, avatar, online, _id }\n */\nconst UserChatHeader = ({ user, onBack }) => {\n  const navigate = useNavigate();\n  const [imgError, setImgError] = useState(false);\n  const handleBack = () => {\n    if (onBack) onBack();\n    else {\n      // Navigate to MyEvents page with personal tab active\n      navigate('/myevents', { state: { activeTab: 'personal' } });\n    }\n  };\n  if (!user) return null;\n\n  const { name = 'User', avatar = 'https://via.placeholder.com/40?text=U', online, _id: userId } = user;\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 z-20 bg-white shadow-sm\">\n      <div className=\"container mx-auto px-4 overflow-x-hidden\">\n        <div className=\"flex items-center h-16 gap-3\">\n          <button\n            onClick={handleBack}\n            className=\"text-indigo-600 mr-1 flex-shrink-0\"\n            aria-label=\"Go back\"\n          >\n            <FaArrowLeft />\n          </button>\n          <button\n            type=\"button\"\n            className=\"flex items-center gap-3 group focus:outline-none w-full transition-all duration-300 justify-start flex-grow\"\n            aria-label={`Open profile of ${name}`}\n          >\n            <div className=\"relative flex-shrink-0 w-10 h-10\">\n              {avatar && !imgError ? (\n                <img\n                  src={avatar}\n                  alt={name}\n                  className=\"w-full h-full rounded-lg object-cover border border-gray-200 bg-gray-50 group-hover:brightness-95 transition-all duration-300 shadow-sm object-center\"\n                  onError={() => setImgError(true)}\n                />\n              ) : (\n                <div className=\"w-full h-full rounded-lg flex items-center justify-center bg-gray-100 border border-gray-200 group-hover:brightness-95 transition-all duration-300 shadow-sm\">\n                  <FaUser className=\"w-6 h-6 text-gray-400\" />\n                </div>\n              )}\n              {online && (\n                <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white\"></div>\n              )}\n            </div>\n            <span\n              className=\"font-semibold text-base text-gray-800 group-hover:text-indigo-600 transition-colors duration-300 overflow-hidden text-ellipsis whitespace-nowrap w-full text-left\"\n              title={name}\n            >\n              {name}\n            </span>\n          </button>\n          {userId && (\n            <button\n              onClick={() => navigate(`/shop/${userId}`)}\n              className=\"text-indigo-600 flex-shrink-0 ml-auto mr-4\"\n              aria-label={`Go to ${name}'s shop`}\n            >\n              <FaStore className=\"text-2xl\" />\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserChatHeader;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport chatApi from '../services/chatApi';\nimport { useAuthStore } from '../../stores/authStore';\n\n// Import components for message UI\nimport MessageBubble from '../components/MessageBubble';\nimport MessageInput from '../components/MessageInput';\nimport MessageTypingIndicator from '../components/MessageTypingIndicator';\nimport UserChatHeader from '../components/UserChatHeader';\n\n// Import WebSocket service\nimport { useMessageWebSocket } from '../services/messageWebSocketService';\n\n/**\n * MessageDetailPage Component\n * \n * Displays the detailed conversation with a specific user\n * Following Single Responsibility Principle:\n * - This component handles the state management and data fetching for a conversation\n * - Delegates rendering to specialized child components\n */\nconst MessageDetailPage = () => {\n  const { threadId } = useParams();\n  const navigate = useNavigate();\n  const [conversation, setConversation] = useState(null);\n  const [fetchError, setFetchError] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  // Get WebSocket connection and message handlers\n  const { \n    sendMessage, \n    lastMessage, \n    connectionStatus,\n    sendTypingIndicator\n  } = useMessageWebSocket(threadId);\n  \n  const { user } = useAuthStore();\n  \n  // Fetch conversation data\n  useEffect(() => {\n    const fetchConversation = async () => {\n      try {\n        // Fetch chat from chat service\n        const chat = await chatApi.getChat(threadId);\n        const other = chat.participants?.find(p => p.userId !== user?._id) || chat.participants?.[0] || {};\n        setConversation({\n          id: chat.chatId,\n          name: other.name || 'User',\n          avatar: other.avatar || '',\n          online: false,\n          _id: other.userId // Add the user ID for the shop icon\n        });\n        setMessages(chat.messages || []);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching conversation:', error);\n        setFetchError(true);\n        setLoading(false);\n      }\n    };\n    \n    fetchConversation();\n  }, [threadId, user?._id]);\n  \n  // Process incoming messages from WebSocket\n  useEffect(() => {\n    if (lastMessage) {\n      if (lastMessage.type === 'message') {\n        // Add the new message to the conversation\n        setMessages(prev => [...prev, {\n          id: String.raw`m${Date.now()}`,\n          sender: 'them',\n          content: lastMessage.content,\n          timestamp: new Date().toISOString(),\n          status: 'received'\n        }]);\n      } else if (lastMessage.type === 'typing') {\n        // Show typing indicator\n        setIsTyping(lastMessage.isTyping);\n      }\n    }\n  }, [lastMessage]);\n  \n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  // Handle sending a new message\n  const handleSendMessage = async (content) => {\n    if (!content.trim()) return;\n    \n    // Generate a client-side message ID to track this message\n    const clientMsgId = String.raw`m${Date.now()}`;\n    \n    // Create temporary message object for optimistic UI update\n    const tempMessage = {\n      id: clientMsgId,\n      sender: 'me',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending'\n    };\n    \n    // Add to messages state (optimistic update)\n    setMessages(prev => [...prev, tempMessage]);\n    \n    try {\n      // Actually save the message to the database\n      const savedMessage = await chatApi.sendMessage({\n        chatId: threadId,\n        senderId: user?._id,\n        senderName: user?.name || 'Me',\n        senderAvatar: user?.profileImage || '',\n        text: content,\n        clientMsgId\n      });\n      \n      // Update message status to delivered after successful save\n      setMessages(prev => \n        prev.map(msg => \n          msg.id === clientMsgId\n            ? { \n                ...msg, \n                id: savedMessage._id || clientMsgId,\n                status: 'delivered' \n              } \n            : msg\n        )\n      );\n      \n      // Also send via WebSocket for real-time updates to other users\n      sendMessage(content);\n      \n      // After a delay, update to \"read\" status\n      setTimeout(() => {\n        setMessages(prev => \n          prev.map(msg => \n            msg.id === clientMsgId \n              ? { ...msg, status: 'read' } \n              : msg\n          )\n        );\n      }, 2000);\n      \n    } catch (error) {\n      console.error('Failed to save message:', error);\n      \n      // Mark message as failed if API call fails\n      setMessages(prev => \n        prev.map(msg => \n          msg.id === clientMsgId\n            ? { ...msg, status: 'failed' } \n            : msg\n        )\n      );\n    }\n  };\n  \n  // Handle typing indicator\n  const handleTyping = (isTyping) => {\n    sendTypingIndicator(isTyping);\n  };\n  \n  // Handle going back\n  const handleGoBack = () => {\n    // Navigate to MyEvents page with personal tab active\n    navigate('/myevents', { state: { activeTab: 'personal' } });\n  };\n  \n  // Loading state\n  if (loading) {\n    return (\n      <div className=\"flex flex-col min-h-screen bg-gray-50 overflow-x-hidden max-w-full\">\n        {/* Header */}\n        <div className=\"sticky top-0 z-10 bg-white shadow-sm\">\n          <div className=\"container mx-auto px-4 overflow-x-hidden\">\n            <div className=\"flex items-center h-16\">\n              <button \n                onClick={handleGoBack}\n                className=\"text-indigo-600 mr-4\"\n                aria-label=\"Go back\"\n              >\n                <FaArrowLeft />\n              </button>\n              <div className=\"flex-1\">\n                <div className=\"h-5 bg-gray-200 rounded w-1/3 mb-1 animate-pulse\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/4 animate-pulse\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Message area with loading skeleton */}\n        <div className=\"flex-1 overflow-y-auto overflow-x-hidden pb-20 pt-4\">\n          <div className=\"container mx-auto px-4 overflow-x-hidden\">\n            <div className=\"space-y-4\">\n              {[...Array(6)].map((_, index) => (\n                <div \n                  key={index} \n                  className={`flex ${index % 2 === 0 ? 'justify-start' : 'justify-end'}`}\n                >\n                  <div \n                    className={`animate-pulse rounded-xl p-3 max-w-xs md:max-w-md\n                    ${index % 2 === 0 ? 'bg-gray-200' : 'bg-indigo-100'}`}\n                    style={{ width: `${Math.random() * 150 + 80}px`, height: `${Math.random() * 30 + 40}px` }}\n                  ></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        {/* Input area skeleton */}\n        <div className=\"sticky bottom-0 z-10 bg-white border-t shadow-sm pb-20 md:pb-0\">\n          <div className=\"container mx-auto px-4 py-2\">\n            <div className=\"h-12 bg-gray-200 rounded animate-pulse\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  // Conversation not found (only show if explicit error)\n  if (fetchError) {\n    return (\n      <div className=\"flex flex-col min-h-screen bg-gray-50 overflow-x-hidden max-w-full\">\n        <div className=\"sticky top-0 z-10 bg-white shadow-sm\">\n          <div className=\"container mx-auto px-4 overflow-x-hidden\">\n            <div className=\"flex items-center h-16\">\n              <button \n                onClick={handleGoBack}\n                className=\"text-indigo-600 mr-4\"\n                aria-label=\"Go back\"\n              >\n                <FaArrowLeft />\n              </button>\n              <h1 className=\"text-xl font-semibold\">Messages</h1>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex-1 flex items-center justify-center pb-20 md:pb-0\">\n          <div className=\"text-center p-4\">\n            <h2 className=\"text-xl font-bold text-gray-800 mb-2\">Conversation Not Found</h2>\n            <p className=\"text-gray-600 mb-4\">\n              The conversation you're looking for does not exist or has been deleted.\n            </p>\n            <button\n              onClick={handleGoBack}\n              className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition\"\n            >\n              Back to Personal Chats\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex flex-col min-h-screen bg-gray-50 overflow-x-hidden max-w-full\">\n      {/* Consistent header */}\n      <UserChatHeader user={{ \n        name: conversation.name, \n        avatar: conversation.avatar, \n        online: conversation.online,\n        _id: conversation._id // Pass the user ID to UserChatHeader\n      }} onBack={handleGoBack} />\n      \n      {/* Messages area */}\n      <div className=\"flex-1 overflow-y-auto overflow-x-hidden pb-28 pt-20 md:pb-24\">\n        <div className=\"container mx-auto px-4 overflow-x-hidden\">\n          <div className=\"max-w-3xl mx-auto space-y-4\">\n            {messages.map((message) => {\n              const isOwn = message.senderId === user?._id || message.sender === user?._id || message.sender === 'me';\n              return (\n                <MessageBubble\n                  key={message._id || message.id}\n                  message={message}\n                  isOwn={isOwn}\n                  avatar={conversation.avatar}\n                />\n              );\n            })}\n            {isTyping && <MessageTypingIndicator />}\n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n      </div>\n      \n      {/* Message input */}\n      <div className=\"fixed bottom-0 left-0 right-0 z-20 bg-white border-t shadow-sm\">\n        <div className=\"container mx-auto px-4 py-2 overflow-x-hidden\">\n          <div className=\"max-w-3xl mx-auto\">\n            <MessageInput \n              onSendMessage={handleSendMessage} \n              onTyping={handleTyping}\n              connectionStatus={connectionStatus}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MessageDetailPage;\n","import { useState, useEffect, useCallback, useRef } from 'react';\n\n/**\n * WebSocket Service for Messaging\n * \n * This service handles real-time messaging through WebSockets\n * Following Single Responsibility Principle - only handles WebSocket communication\n */\n\n// In a real app, this would be an environment variable\nconst WS_URL = 'wss://api.tymout.example/ws';\n\n/**\n * Mock WebSocket implementation for development\n * This simulates WebSocket behavior for development purposes\n */\nclass MockWebSocket {\n  constructor(url) {\n    this.url = url;\n    this.readyState = 0; // CONNECTING\n    this.onopen = null;\n    this.onmessage = null;\n    this.onclose = null;\n    this.onerror = null;\n    \n    // Simulate connection delay\n    setTimeout(() => {\n      this.readyState = 1; // OPEN\n      if (this.onopen) this.onopen({ target: this });\n    }, 1000);\n  }\n  \n  send(data) {\n    console.log('Mock WebSocket sent:', data);\n    \n    // Simulate echo response\n    const parsedData = JSON.parse(data);\n    \n    if (parsedData.type === 'message') {\n      // Simulate message receipt acknowledgment\n      setTimeout(() => {\n        if (this.onmessage) {\n          this.onmessage({\n            data: JSON.stringify({\n              type: 'status',\n              messageId: parsedData.messageId,\n              status: 'delivered'\n            })\n          });\n        }\n      }, 500);\n      \n      // Simulate automated response after delay\n      setTimeout(() => {\n        if (Math.random() > 0.5 && this.onmessage) {\n          this.onmessage({\n            data: JSON.stringify({\n              type: 'message',\n              threadId: parsedData.threadId,\n              content: `This is an automated response to \"${parsedData.content}\"`,\n              timestamp: new Date().toISOString()\n            })\n          });\n        }\n      }, 3000);\n    }\n    \n    if (parsedData.type === 'typing') {\n      // Randomly simulate typing back\n      if (parsedData.isTyping && Math.random() > 0.7) {\n        setTimeout(() => {\n          if (this.onmessage) {\n            this.onmessage({\n              data: JSON.stringify({\n                type: 'typing',\n                threadId: parsedData.threadId,\n                isTyping: true\n              })\n            });\n          }\n          \n          // Stop typing after a bit\n          setTimeout(() => {\n            if (this.onmessage) {\n              this.onmessage({\n                data: JSON.stringify({\n                  type: 'typing',\n                  threadId: parsedData.threadId,\n                  isTyping: false\n                })\n              });\n            }\n          }, 2000);\n        }, 1000);\n      }\n    }\n  }\n  \n  close() {\n    this.readyState = 3; // CLOSED\n    if (this.onclose) this.onclose({ target: this });\n  }\n}\n\n/**\n * Custom hook for using the messaging WebSocket\n */\nexport const useMessageWebSocket = (threadId) => {\n  const [lastMessage, setLastMessage] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const socket = useRef(null);\n  \n  // Initialize WebSocket connection - run only when threadId changes\n  useEffect(() => {\n    // Create WebSocket connection\n    // Use MockWebSocket for development, real WebSocket for production\n    socket.current = process.env.NODE_ENV === 'production' \n      ? new WebSocket(`${WS_URL}/thread/${threadId}`)\n      : new MockWebSocket(`${WS_URL}/thread/${threadId}`);\n    \n    // Connection opened\n    socket.current.onopen = () => {\n      console.log('WebSocket Connected');\n      setConnectionStatus('connected');\n    };\n    \n    // Listen for messages\n    socket.current.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket message received:', data);\n        setLastMessage(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    \n    // Connection closed\n    socket.current.onclose = () => {\n      console.log('WebSocket Disconnected');\n      setConnectionStatus('disconnected');\n    };\n    \n    // Connection error\n    socket.current.onerror = (error) => {\n      console.error('WebSocket Error:', error);\n      setConnectionStatus('disconnected');\n    };\n    \n    // Clean up on unmount\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n      }\n    };\n  }, [threadId]); // Only reconnect if threadId changes\n  \n  // Function to send a message - memoized to maintain stable reference\n  const sendMessage = useCallback((content, type = 'text') => {\n    if (socket.current && socket.current.readyState === 1) {\n      const message = {\n        type: 'message',\n        threadId,\n        content,\n        contentType: type,\n        timestamp: new Date().toISOString()\n      };\n      \n      socket.current.send(JSON.stringify(message));\n      return true;\n    }\n    \n    return false;\n  }, [threadId]);\n  \n  // Function to send typing indicator - memoized to maintain stable reference\n  const sendTypingIndicator = useCallback((isTyping) => {\n    if (socket.current && socket.current.readyState === 1) {\n      const message = {\n        type: 'typing',\n        threadId,\n        isTyping,\n        timestamp: new Date().toISOString()\n      };\n      \n      socket.current.send(JSON.stringify(message));\n      return true;\n    }\n    \n    return false;\n  }, [threadId]);\n  \n  // Return memoized value to maintain stable reference\n  return {\n    sendMessage,\n    sendTypingIndicator,\n    lastMessage,\n    connectionStatus\n  };\n};\n"],"names":["CHAT_ENDPOINT","concat","process","client","axios","create","baseURL","withCredentials","getUserChats","async","data","get","userId","getChat","chatId","getMessages","limit","skip","arguments","length","undefined","params","sendMessage","post","payload","markAsRead","getChatPreview","updateChatStatus","_ref","isBlocked","blockedBy","patch","startDirectChat","userAId","userBId","userAName","userBName","userAAvatar","userBAvatar","message","isOwn","avatar","content","text","timestamp","createdAt","Date","toISOString","status","formattedTime","formatDistanceToNow","addSuffix","getStatusIcon","_jsx","FaCheck","className","FaCheckDouble","_jsxs","children","src","alt","onError","e","target","onerror","MessageInput","onSendMessage","onTyping","connectionStatus","setMessage","useState","isTyping","setIsTyping","inputRef","useRef","typingTimeoutRef","useEffect","_inputRef$current","current","focus","clearTimeout","handleTypingState","isUserTyping","setTimeout","handleSend","_inputRef$current2","trim","FaPaperclip","ref","value","onChange","onKeyPress","key","shiftKey","preventDefault","placeholder","rows","disabled","FaSmile","FaMicrophone","onClick","FaPaperPlane","defaultProps","MessageTypingIndicator","style","animationDelay","user","onBack","navigate","useNavigate","imgError","setImgError","name","online","_id","handleBack","state","activeTab","FaArrowLeft","type","FaUser","title","FaStore","MessageDetailPage","threadId","useParams","conversation","setConversation","fetchError","setFetchError","messages","setMessages","loading","setLoading","messagesEndRef","lastMessage","sendTypingIndicator","setLastMessage","setConnectionStatus","socket","WebSocket","onopen","onmessage","event","JSON","parse","error","onclose","close","useCallback","readyState","contentType","send","stringify","useMessageWebSocket","useAuthStore","_chat$participants","_chat$participants2","chat","chatApi","other","participants","find","p","id","fetchConversation","prev","String","raw","_templateObject","_taggedTemplateLiteral","now","sender","_messagesEndRef$curre","scrollIntoView","behavior","handleGoBack","Array","map","_","index","width","Math","random","height","UserChatHeader","senderId","MessageBubble","clientMsgId","_templateObject2","tempMessage","savedMessage","senderName","senderAvatar","profileImage","msg","_objectSpread"],"sourceRoot":""}