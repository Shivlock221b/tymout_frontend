{"version":3,"file":"static/js/170.666bb7cf.chunk.js","mappings":"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","sources":["components/onboarding/OnboardingStepIndicator.js","components/onboarding/BasicInfoStep.js","components/onboarding/InterestsStep.js","hooks/queries/useOnboardingQueries.js","components/onboarding/ProfileImageStep.js","components/onboarding/SuccessStep.js","pages/OnboardingPage.js"],"sourcesContent":["import React from 'react';\n\nconst OnboardingStepIndicator = ({ currentStep, totalSteps }) => {\n  return (\n    <div className=\"flex items-center justify-between w-full\">\n      {Array.from({ length: totalSteps }).map((_, index) => {\n        const stepNumber = index + 1;\n        const isActive = stepNumber === currentStep;\n        const isCompleted = stepNumber < currentStep;\n        \n        return (\n          <div key={stepNumber} className=\"flex flex-col items-center\">\n            <div \n              className={`\n                flex items-center justify-center w-10 h-10 rounded-full \n                ${isActive ? 'bg-indigo-600 text-white' : ''}\n                ${isCompleted ? 'bg-green-500 text-white' : ''}\n                ${!isActive && !isCompleted ? 'bg-gray-200 text-gray-500' : ''}\n                transition-all duration-300\n              `}\n            >\n              {isCompleted ? (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n              ) : (\n                <span className=\"text-sm font-medium\">{stepNumber}</span>\n              )}\n            </div>\n            \n            {/* Step label */}\n            <span className={`mt-2 text-xs ${isActive || isCompleted ? 'text-indigo-600 font-medium' : 'text-gray-500'}`}>\n              {getStepLabel(stepNumber)}\n            </span>\n            \n            {/* Connector line */}\n            {stepNumber < totalSteps && (\n              <div className=\"absolute left-0 right-0 hidden sm:block\" style={{ \n                top: '1.25rem', \n                left: `calc(${(stepNumber - 0.5) * 100 / totalSteps}%)`,\n                width: `calc(${100 / totalSteps}%)`\n              }}>\n                <div className={`h-0.5 ${isCompleted ? 'bg-green-500' : 'bg-gray-200'}`}></div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// Helper function to get step labels\nconst getStepLabel = (step) => {\n  switch (step) {\n    case 1:\n      return 'Basic Info';\n    case 2:\n      return 'Interests';\n    case 3:\n      return 'Profile Image';\n    case 4:\n      return 'Complete';\n    default:\n      return `Step ${step}`;\n  }\n};\n\nexport default OnboardingStepIndicator;\n","import React, { useState } from 'react';\n\n// List of available cities\nconst CITIES = [\"Agra\", \"Gurugram\"];\n\nconst BasicInfoStep = ({ initialData, onComplete, onSkip, isLoading }) => {\n  const [formData, setFormData] = useState({\n    name: initialData.name || '',\n    bio: initialData.bio || '',\n    location: initialData.location || ''\n  });\n  \n  const [errors, setErrors] = useState({});\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear error when user types\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData.location) {\n      newErrors.location = 'Please select your city';\n    }\n    \n    if (formData.bio && formData.bio.length > 500) {\n      newErrors.bio = 'Bio cannot exceed 500 characters';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      onComplete(formData);\n    }\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Tell us about yourself</h2>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Name <span className=\"text-red-500\">*</span>\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 ${\n              errors.name ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Your full name\"\n          />\n          {errors.name && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n          )}\n        </div>\n        \n        <div className=\"mb-4\">\n          <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            City <span className=\"text-red-500\">*</span>\n          </label>\n          <select\n            id=\"location\"\n            name=\"location\"\n            value={formData.location}\n            onChange={handleChange}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n            required\n          >\n            <option value=\"\" disabled>Select your city</option>\n            {CITIES.map(city => (\n              <option key={city} value={city}>{city}</option>\n            ))}\n          </select>\n          {errors.location && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.location}</p>\n          )}\n        </div>\n        \n        <div className=\"mb-6\">\n          <label htmlFor=\"bio\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Bio\n          </label>\n          <textarea\n            id=\"bio\"\n            name=\"bio\"\n            value={formData.bio}\n            onChange={handleChange}\n            rows=\"4\"\n            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 ${\n              errors.bio ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Tell us a bit about yourself...\"\n          ></textarea>\n          <p className=\"mt-1 text-xs text-gray-500\">\n            {formData.bio ? formData.bio.length : 0}/500 characters\n          </p>\n          {errors.bio && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.bio}</p>\n          )}\n        </div>\n        \n        <div className=\"flex justify-between\">\n          <button\n            type=\"button\"\n            onClick={onSkip}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-500\"\n            disabled={isLoading}\n          >\n            Skip for now\n          </button>\n          \n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <span className=\"flex items-center\">\n                <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Saving...\n              </span>\n            ) : (\n              'Continue'\n            )}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default BasicInfoStep;\n","import React, { useState } from 'react';\n\nconst INTEREST_OPTIONS = [\n  'Food & Dining', 'Coffee', 'Networking', 'Business', 'Technology', \n  'Art & Culture', 'Music', 'Sports', 'Fitness', 'Outdoors', \n  'Books', 'Movies', 'Gaming', 'Travel', 'Photography',\n  'Fashion', 'Education', 'Science', 'Health & Wellness', 'Spirituality'\n];\n\nconst InterestsStep = ({ initialInterests = [], onComplete, onSkip, isLoading }) => {\n  const [selectedInterests, setSelectedInterests] = useState(initialInterests);\n  const [customInterest, setCustomInterest] = useState('');\n  const [error, setError] = useState('');\n  \n  const handleInterestToggle = (interest) => {\n    setSelectedInterests(prev => {\n      if (prev.includes(interest)) {\n        return prev.filter(item => item !== interest);\n      } else {\n        return [...prev, interest];\n      }\n    });\n    \n    if (error) setError('');\n  };\n  \n  const handleAddCustomInterest = () => {\n    if (!customInterest.trim()) return;\n    \n    if (customInterest.length > 20) {\n      setError('Interest cannot exceed 20 characters');\n      return;\n    }\n    \n    if (selectedInterests.includes(customInterest.trim())) {\n      setError('This interest is already added');\n      return;\n    }\n    \n    setSelectedInterests(prev => [...prev, customInterest.trim()]);\n    setCustomInterest('');\n    setError('');\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (selectedInterests.length === 0) {\n      setError('Please select at least one interest');\n      return;\n    }\n    \n    onComplete({ interests: selectedInterests });\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">What are you interested in?</h2>\n      <p className=\"text-gray-600 mb-6\">Select interests to help us connect you with like-minded people and events.</p>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-6\">\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {INTEREST_OPTIONS.map(interest => (\n              <button\n                key={interest}\n                type=\"button\"\n                onClick={() => handleInterestToggle(interest)}\n                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${\n                  selectedInterests.includes(interest)\n                    ? 'bg-indigo-100 text-indigo-800 border-2 border-indigo-500'\n                    : 'bg-gray-100 text-gray-800 border-2 border-transparent hover:bg-gray-200'\n                }`}\n              >\n                {interest}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"flex items-center mt-4\">\n            <input\n              type=\"text\"\n              value={customInterest}\n              onChange={(e) => setCustomInterest(e.target.value)}\n              placeholder=\"Add custom interest\"\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              maxLength={20}\n            />\n            <button\n              type=\"button\"\n              onClick={handleAddCustomInterest}\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-r-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n            >\n              Add\n            </button>\n          </div>\n          \n          {error && (\n            <p className=\"mt-2 text-sm text-red-600\">{error}</p>\n          )}\n          \n          {selectedInterests.length > 0 && (\n            <div className=\"mt-4\">\n              <p className=\"text-sm font-medium text-gray-700 mb-2\">Your selected interests:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {selectedInterests.map(interest => (\n                  <div \n                    key={interest} \n                    className=\"bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm font-medium flex items-center\"\n                  >\n                    {interest}\n                    <button\n                      type=\"button\"\n                      onClick={() => handleInterestToggle(interest)}\n                      className=\"ml-1.5 text-indigo-600 hover:text-indigo-800 focus:outline-none\"\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex justify-between\">\n          <button\n            type=\"button\"\n            onClick={onSkip}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-500\"\n            disabled={isLoading}\n          >\n            Skip for now\n          </button>\n          \n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <span className=\"flex items-center\">\n                <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Saving...\n              </span>\n            ) : (\n              'Continue'\n            )}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default InterestsStep;\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\n\n// Configure axios client for user service - same as in settingsService\nconst userServiceClient = axios.create({\n  baseURL: process.env.REACT_APP_USER_SERVICE_URL || 'http://localhost:3001', // User service runs on port 3001\n  timeout: 10000\n  // Don't set default Content-Type here as it will be overridden for FormData\n});\n\n// Intercept requests to add auth token\nuserServiceClient.interceptors.request.use(\n  config => {\n    // Extract token from 'auth-storage' in localStorage\n    const authStorage = localStorage.getItem('auth-storage');\n    let token = null;\n    if (authStorage) {\n      try {\n        const parsed = JSON.parse(authStorage);\n        token = parsed.state?.token;\n      } catch (e) {\n        // Optionally log error\n      }\n    }\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Upload profile image during onboarding\n * @param {File} imageFile - The image file to upload\n * @returns {Promise<Object>} Updated user data with profile image URL\n */\nconst uploadOnboardingProfileImage = async (imageFile) => {\n  try {\n    console.log('Uploading onboarding profile image:', imageFile.name, 'size:', imageFile.size, 'type:', imageFile.type);\n    \n    // Create a new instance of FormData\n    const formData = new FormData();\n    \n    // Explicitly append the file with the correct field name\n    formData.append('profileImage', imageFile, imageFile.name);\n    \n    // Log the FormData contents for debugging\n    console.log('FormData created with file:', imageFile.name);\n    \n    // Create a custom instance for this specific request\n    const instance = axios.create({\n      baseURL: process.env.REACT_APP_USER_SERVICE_URL || 'http://localhost:3001',\n      timeout: 30000 // Longer timeout for file uploads\n    });\n    \n    // Add auth token to this specific request\n    const authStorage = localStorage.getItem('auth-storage');\n    let token = null;\n    if (authStorage) {\n      try {\n        const parsed = JSON.parse(authStorage);\n        token = parsed.state?.token;\n        if (token) {\n          console.log('Auth token found and will be used for upload');\n        }\n      } catch (e) {\n        console.error('Error parsing auth storage:', e);\n      }\n    }\n    \n    // Make direct API call to the user service\n    // Important: Do NOT set Content-Type header manually for FormData\n    const response = await instance.post('/user/profile/image', formData, {\n      headers: {\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n        // Let axios set the Content-Type with boundary automatically\n      }\n    });\n    \n    console.log('Upload response:', response.data);\n    \n    return response.data.data;\n  } catch (error) {\n    console.error('Error uploading profile image:', error);\n    throw error;\n  }\n};\n\n/**\n * Custom hook for uploading profile image during onboarding\n * @returns {Object} - React Query mutation object for profile image upload\n */\nexport const useUploadOnboardingProfileImage = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: uploadOnboardingProfileImage,\n    \n    onSuccess: (data) => {\n      // Update the user data in the cache\n      queryClient.setQueryData(['user'], oldData => {\n        if (!oldData) return oldData;\n        return { ...oldData, profileImage: data.profileImage };\n      });\n      \n      // Invalidate queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: ['user'] });\n    }\n  });\n};\n","import React, { useState, useRef } from 'react';\nimport { useUploadOnboardingProfileImage } from '../../hooks/queries/useOnboardingQueries';\n\nconst ProfileImageStep = ({ initialImage, onComplete, onSkip, isLoading }) => {\n  const [image, setImage] = useState(initialImage || '');\n  const [previewUrl, setPreviewUrl] = useState(initialImage || '');\n  const [error, setError] = useState('');\n  const fileInputRef = useRef(null);\n  \n  // Use the direct upload mutation hook\n  const uploadProfileImage = useUploadOnboardingProfileImage();\n  \n  const handleFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];\n    if (!validTypes.includes(file.type)) {\n      setError('Please select a valid image file (JPEG, PNG)');\n      return;\n    }\n    \n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      setError('Image size should not exceed 5MB');\n      return;\n    }\n    \n    // Create preview immediately for better UX\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setPreviewUrl(reader.result);\n    };\n    reader.readAsDataURL(file);\n    \n    // Upload to server using the mutation\n    uploadProfileImage.mutate(file, {\n      onSuccess: (data) => {\n        console.log('Profile image uploaded successfully:', data);\n        setImage(data.profileImage);\n        setError('');\n      },\n      onError: (error) => {\n        console.error('Error uploading image:', error);\n        setError(`Failed to upload image: ${error.message || 'Please try again'}`);\n      }\n    });\n  };\n  \n  const handleRemoveImage = () => {\n    setImage('');\n    setPreviewUrl('');\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onComplete({ profileImage: image });\n  };\n  \n  // Check if image is uploading\n  const isUploading = uploadProfileImage.isPending;\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Add a profile picture</h2>\n      <p className=\"text-gray-600 mb-6\">A profile picture helps others recognize you and makes your profile more personal.</p>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-6\">\n          <div className=\"flex flex-col items-center\">\n            {previewUrl ? (\n              <div className=\"relative\">\n                <img \n                  src={previewUrl} \n                  alt=\"Profile preview\" \n                  className=\"w-32 h-32 rounded-full object-cover border-4 border-indigo-100\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={handleRemoveImage}\n                  className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 focus:outline-none\"\n                  disabled={isUploading}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n            ) : (\n              <div \n                className=\"w-32 h-32 rounded-full bg-gray-200 flex items-center justify-center text-gray-500 cursor-pointer hover:bg-gray-300\"\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                </svg>\n              </div>\n            )}\n            \n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileChange}\n              accept=\"image/jpeg,image/png,image/jpg\"\n              className=\"hidden\"\n              disabled={isUploading}\n            />\n            \n            <button\n              type=\"button\"\n              onClick={() => fileInputRef.current?.click()}\n              className=\"mt-4 px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n              disabled={isUploading}\n            >\n              {previewUrl ? 'Change Image' : 'Upload Image'}\n            </button>\n            \n            {isUploading && (\n              <div className=\"mt-2 flex items-center text-sm text-indigo-600\">\n                <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Uploading...\n              </div>\n            )}\n            \n            {error && (\n              <p className=\"mt-2 text-sm text-red-600\">{error}</p>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex justify-between\">\n          <button\n            type=\"button\"\n            onClick={onSkip}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-500\"\n            disabled={isLoading || isUploading}\n          >\n            Skip for now\n          </button>\n          \n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n            disabled={isLoading || isUploading}\n          >\n            {isLoading ? (\n              <span className=\"flex items-center\">\n                <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Saving...\n              </span>\n            ) : (\n              'Continue'\n            )}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileImageStep;\n","import React from 'react';\n\nconst SuccessStep = ({ profileData, onComplete, isLoading }) => {\n  const calculateCompleteness = () => {\n    const fields = ['name', 'bio', 'location', 'interests', 'profileImage'];\n    let score = 0;\n    const maxScore = 100;\n    const pointsPerField = maxScore / fields.length;\n    \n    fields.forEach(field => {\n      if (profileData[field] && (Array.isArray(profileData[field]) ? profileData[field].length > 0 : profileData[field])) {\n        score += pointsPerField;\n      }\n    });\n    \n    return Math.min(Math.round(score), maxScore);\n  };\n  \n  const completeness = calculateCompleteness();\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"text-center mb-6\">\n        <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-green-100 text-green-500 mb-4\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n        </div>\n        <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">You're all set!</h2>\n        <p className=\"text-gray-600\">Your profile is {completeness}% complete.</p>\n      </div>\n      \n      <div className=\"mb-6\">\n        <div className=\"bg-gray-200 rounded-full h-4 mb-2\">\n          <div \n            className=\"bg-green-500 h-4 rounded-full\" \n            style={{ width: `${completeness}%` }}\n          ></div>\n        </div>\n      </div>\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium text-gray-800 mb-3\">Profile Summary</h3>\n        \n        <div className=\"space-y-3\">\n          <div className=\"flex\">\n            <div className=\"w-1/3 text-gray-500\">Name:</div>\n            <div className=\"w-2/3 font-medium\">{profileData.name || 'Not provided'}</div>\n          </div>\n          \n          {profileData.location && (\n            <div className=\"flex\">\n              <div className=\"w-1/3 text-gray-500\">Location:</div>\n              <div className=\"w-2/3\">{profileData.location}</div>\n            </div>\n          )}\n          \n          {profileData.bio && (\n            <div className=\"flex\">\n              <div className=\"w-1/3 text-gray-500\">Bio:</div>\n              <div className=\"w-2/3\">{profileData.bio}</div>\n            </div>\n          )}\n          \n          {profileData.interests && profileData.interests.length > 0 && (\n            <div className=\"flex\">\n              <div className=\"w-1/3 text-gray-500\">Interests:</div>\n              <div className=\"w-2/3\">\n                <div className=\"flex flex-wrap gap-1\">\n                  {profileData.interests.map(interest => (\n                    <span key={interest} className=\"bg-indigo-100 text-indigo-800 px-2 py-0.5 rounded-full text-xs\">\n                      {interest}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {profileData.profileImage && (\n            <div className=\"flex items-center\">\n              <div className=\"w-1/3 text-gray-500\">Profile Image:</div>\n              <div className=\"w-2/3\">\n                <img \n                  src={profileData.profileImage} \n                  alt=\"Profile\" \n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"text-center\">\n        <button\n          onClick={onComplete}\n          className=\"px-6 py-2 bg-indigo-600 text-white font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n          disabled={isLoading}\n        >\n          {isLoading ? (\n            <span className=\"flex items-center justify-center\">\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Finishing...\n            </span>\n          ) : (\n            'Start Exploring'\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SuccessStep;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useAuthStore } from '../stores/authStore';\nimport { useMutation } from '@tanstack/react-query';\nimport profileService from '../services/profileService';\nimport OnboardingStepIndicator from '../components/onboarding/OnboardingStepIndicator';\nimport BasicInfoStep from '../components/onboarding/BasicInfoStep';\nimport InterestsStep from '../components/onboarding/InterestsStep';\nimport ProfileImageStep from '../components/onboarding/ProfileImageStep';\nimport SuccessStep from '../components/onboarding/SuccessStep';\n\nconst OnboardingPage = () => {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const user = useAuthStore(state => state.user);\n  const updateUser = useAuthStore(state => state.updateUser);\n  \n  const [currentStep, setCurrentStep] = useState(1);\n  const [profileData, setProfileData] = useState({\n    name: user?.name || '',\n    bio: user?.bio || '',\n    location: user?.location || '',\n    interests: user?.interests || [],\n    profileImage: user?.profileImage || ''\n  });\n  \n  const [isCompleted, setIsCompleted] = useState(false);\n  \n  // Check if user is already onboarded\n  useEffect(() => {\n    if (user && user.completeness > 70) {\n      navigate('/explore');\n    }\n  }, [user, navigate]);\n  \n  // Update profile mutation\n  const { mutate: updateProfile, isLoading: isUpdating } = useMutation({\n    mutationFn: profileService.updateProfile,\n    onSuccess: (data) => {\n      // Update the auth store with the updated user data\n      updateUser(data);\n      queryClient.invalidateQueries({ queryKey: ['profile'] });\n      \n      if (currentStep === 4) {\n        setIsCompleted(true);\n        // Redirect to explore page after a short delay\n        setTimeout(() => {\n          navigate('/explore');\n        }, 2000);\n      } else {\n        // Move to the next step\n        setCurrentStep(prev => prev + 1);\n      }\n    },\n    onError: (error) => {\n      console.error('Error updating profile:', error);\n      // Handle error (show toast notification, etc.)\n    }\n  });\n  \n  // Handle step completion\n  const handleStepComplete = (stepData) => {\n    const updatedProfileData = { ...profileData, ...stepData };\n    setProfileData(updatedProfileData);\n    \n    // For the final step, we'll let the mutation's onSuccess handle the navigation\n    if (currentStep === 4) {\n      updateProfile(updatedProfileData);\n    } else {\n      // For other steps, move to next step immediately and update profile in background\n      setCurrentStep(prev => prev + 1);\n      updateProfile(updatedProfileData);\n    }\n  };\n  \n  // Handle skip\n  const handleSkip = () => {\n    if (currentStep < 4) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n  \n  // Render the current step\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <BasicInfoStep \n            initialData={{ name: profileData.name, bio: profileData.bio, location: profileData.location }}\n            onComplete={handleStepComplete}\n            onSkip={handleSkip}\n            isLoading={isUpdating}\n          />\n        );\n      case 2:\n        return (\n          <InterestsStep \n            initialInterests={profileData.interests}\n            onComplete={handleStepComplete}\n            onSkip={handleSkip}\n            isLoading={isUpdating}\n          />\n        );\n      case 3:\n        return (\n          <ProfileImageStep \n            initialImage={profileData.profileImage}\n            onComplete={handleStepComplete}\n            onSkip={handleSkip}\n            isLoading={isUpdating}\n          />\n        );\n      case 4:\n        return (\n          <SuccessStep \n            profileData={profileData}\n            onComplete={() => {\n              updateProfile(profileData);\n              // Immediately navigate to explore page\n              navigate('/explore');\n            }}\n            isLoading={isUpdating}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n  \n  if (isCompleted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-white\">\n        <div className=\"p-8 bg-white shadow-md rounded-lg text-center\">\n          <div className=\"text-green-500 mb-4\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">Profile Completed!</h2>\n          <p className=\"text-gray-600 mb-4\">Your profile has been successfully set up.</p>\n          <p className=\"text-gray-500\">Redirecting to explore page...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex flex-col bg-white\">\n      <div className=\"py-6 px-4 sm:px-6 lg:px-8 flex-1\">\n        <div className=\"max-w-md mx-auto\">\n          <h1 className=\"text-2xl font-bold text-center text-gray-900 mb-6\">Complete Your Profile</h1>\n          \n          <OnboardingStepIndicator currentStep={currentStep} totalSteps={4} />\n          \n          <div className=\"mt-8\">\n            {renderStep()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingPage;\n"],"names":["getStepLabel","step","concat","_ref","currentStep","totalSteps","_jsx","className","children","Array","from","length","map","_","index","stepNumber","isActive","isCompleted","_jsxs","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","style","top","left","width","CITIES","initialData","onComplete","onSkip","isLoading","formData","setFormData","useState","name","bio","location","errors","setErrors","handleChange","e","value","target","prev","_objectSpread","onSubmit","preventDefault","validateForm","newErrors","trim","Object","keys","htmlFor","type","id","onChange","placeholder","required","disabled","city","rows","onClick","cx","cy","r","INTEREST_OPTIONS","initialInterests","selectedInterests","setSelectedInterests","customInterest","setCustomInterest","error","setError","handleInterestToggle","interest","includes","filter","item","interests","maxLength","handleAddCustomInterest","axios","create","baseURL","process","timeout","interceptors","request","use","config","authStorage","localStorage","getItem","token","_parsed$state","JSON","parse","state","headers","Promise","reject","uploadOnboardingProfileImage","async","FormData","append","imageFile","instance","_parsed$state2","post","data","initialImage","image","setImage","previewUrl","setPreviewUrl","fileInputRef","useRef","uploadProfileImage","useUploadOnboardingProfileImage","queryClient","useQueryClient","useMutation","mutationFn","onSuccess","setQueryData","oldData","profileImage","invalidateQueries","queryKey","isUploading","isPending","src","alt","handleRemoveImage","current","_fileInputRef$current","click","ref","file","files","size","reader","FileReader","onloadend","result","readAsDataURL","mutate","onError","message","accept","_fileInputRef$current2","profileData","completeness","calculateCompleteness","fields","score","pointsPerField","forEach","field","isArray","Math","min","round","OnboardingPage","navigate","useNavigate","user","useAuthStore","updateUser","setCurrentStep","setProfileData","setIsCompleted","useEffect","updateProfile","isUpdating","profileService","setTimeout","handleStepComplete","stepData","updatedProfileData","handleSkip","OnboardingStepIndicator","renderStep","BasicInfoStep","InterestsStep","ProfileImageStep","SuccessStep"],"sourceRoot":""}