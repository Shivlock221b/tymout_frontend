{"version":3,"file":"static/js/998.b9bdc8f7.chunk.js","mappings":"+KAUA,MA0DA,EA1DuBA,IAA6B,IAA5B,QAAEC,EAAO,UAAEC,GAAWF,EAW5C,OAAIE,GARFC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qEAAoEC,SAChF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAIC,IACtBJ,EAAAA,EAAAA,KAAA,OAAaC,UAAU,+BAAbG,OAWXN,GAAYO,MAAMC,QAAQR,IAA+B,IAAnBA,EAAQS,QAWjDP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wDAAuDC,SACnEJ,EAAQK,KAAI,CAACK,EAAMC,IAEbD,GAASA,EAAKE,IAOjBC,EAAAA,EAAAA,MAAA,OAAmBV,UAAU,uBAAsBC,SAAA,EACjDF,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRJ,KAAMA,EACNK,KAAML,EAAKK,MAAQ,QACnBC,OAAO,UACPC,WAAW,EACXC,QAAQ,YAGTP,EAAQX,EAAQS,OAAS,IACxBP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8CAA8CgB,MAAO,CAAEC,WAAY,cAX9EV,EAAKE,IALR,UAdXC,EAAAA,EAAAA,MAAA,OAAKV,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yCAAwCC,SAAC,sBACvDF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,2CAkC3B,C","sources":["components/explore/ExploreResults.js"],"sourcesContent":["import React from 'react';\nimport EventCard from '../common/EventCard';\n\n/**\n * ExploreResults Component\n * \n * Following Single Responsibility Principle:\n * - This component only handles displaying the results list\n * - It uses the type property of each item to determine how to display it\n */\nconst ExploreResults = ({ results, isLoading }) => {\n  // Render loading skeleton\n  const renderSkeleton = () => (\n    <div className=\"animate-pulse grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {[1, 2, 3, 4, 5, 6].map(i => (\n        <div key={i} className=\"bg-gray-200 h-48 rounded-lg\"></div>\n      ))}\n    </div>\n  );\n  \n  // Handle loading state\n  if (isLoading) {\n    return renderSkeleton();\n  }\n  \n  // Handle empty results\n  if (!results || !Array.isArray(results) || results.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <h3 className=\"text-xl font-medium text-gray-700 mb-2\">No results found</h3>\n        <p className=\"text-gray-500\">Try adjusting your search or filters</p>\n      </div>\n    );\n  }\n  \n  // Render results - now using grid for desktop and keeping responsive for mobile\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10\">\n      {results.map((item, index) => {\n        // Skip null or invalid items\n        if (!item || !item.id) {\n          console.warn('Invalid item in results', item);\n          return null;\n        }\n        \n        // Render unified EventCard with divider, except for the last item\n        return (\n          <div key={item.id} className=\"event-card-container\">\n            <EventCard \n              item={item} \n              type={item.type || 'event'} // Default to 'event' if type is missing\n              source=\"explore\"\n              fullWidth={true} // Add fullWidth prop to make cards fill their grid cells\n              variant=\"explore\"\n            />\n            {/* Add divider line after every card except the last one */}\n            {index < results.length - 1 && (\n              <div className=\"mx-auto my-1 px-4\">\n                <div className=\"h-px bg-gray-200 w-full max-w-[85%] mx-auto\" style={{ marginLeft: '60px' }}></div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ExploreResults;\n"],"names":["_ref","results","isLoading","_jsx","className","children","map","i","Array","isArray","length","item","index","id","_jsxs","EventCard","type","source","fullWidth","variant","style","marginLeft"],"sourceRoot":""}