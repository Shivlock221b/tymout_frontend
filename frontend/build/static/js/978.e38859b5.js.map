{"version":3,"file":"static/js/978.e38859b5.js","mappings":"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","sources":["../../node_modules/@tanstack/query-core/src/retryer.ts","../../node_modules/@tanstack/query-core/src/thenable.ts","../../node_modules/@tanstack/query-core/src/removable.ts","../../node_modules/@tanstack/query-core/src/utils.ts","../../node_modules/@tanstack/query-core/src/notifyManager.ts","../../node_modules/@tanstack/query-core/src/mutation.ts","../../node_modules/@tanstack/query-core/src/onlineManager.ts","../../node_modules/@tanstack/query-core/src/subscribable.ts","../../node_modules/@tanstack/query-core/src/focusManager.ts","../../node_modules/@tanstack/query-core/src/queryCache.ts","../../node_modules/@tanstack/query-core/src/mutationCache.ts","../../node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts","../../node_modules/@tanstack/query-core/src/queryClient.ts","../../node_modules/socket.io-parser/build/esm/is-binary.js","../../node_modules/socket.io-parser/build/esm/binary.js","../../node_modules/socket.io-parser/build/esm/index.js","../../node_modules/socket.io-client/build/esm/on.js","../../node_modules/socket.io-client/build/esm/socket.js","../../node_modules/socket.io-client/build/esm/contrib/backo2.js","../../node_modules/socket.io-client/build/esm/manager.js","../../node_modules/socket.io-client/build/esm/index.js","../../node_modules/socket.io-client/build/esm/url.js","../../node_modules/@tanstack/query-core/src/mutationObserver.ts","../../node_modules/@tanstack/react-query/src/useMutation.ts","../../node_modules/@tanstack/query-core/src/queryObserver.ts","../../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../../node_modules/@tanstack/react-query/src/IsRestoringProvider.ts","../../node_modules/@tanstack/react-query/src/suspense.ts","../../node_modules/@tanstack/react-query/src/useQuery.ts","../../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../../node_modules/@tanstack/react-query/src/QueryClientProvider.tsx","../../node_modules/@socket.io/component-emitter/lib/esm/index.js","../../node_modules/@tanstack/query-core/src/query.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n","/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters<TQueryKey extends QueryKey = QueryKey> {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: TQueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (\n    mutation: Mutation<TData, TError, TVariables, TContext>,\n  ) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime: undefined | StaleTime<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): number | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        ((!array && aItems.includes(key)) || array) &&\n        a[key] === undefined &&\n        b[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\n// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n\n        // Prevent the replaceEqualDeep from being called again down below.\n        throw error\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n\nexport function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwOnError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwOnError function to override throwing behavior on a per-error basis\n  if (typeof throwOnError === 'function') {\n    return throwOnError(...params)\n  }\n\n  return !!throwOnError\n}\n","// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const onContinue = () => {\n      this.#dispatch({ type: 'continue' })\n    }\n\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (restored) {\n        // Dispatch continue action to unpause restored mutation\n        onContinue()\n      } else {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","export class Subscribable<TListener extends Function> {\n  protected listeners = new Set<TListener>()\n\n  constructor() {\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { hashQueryKeyByOptions, matchQuery } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type {\n  DefaultError,\n  NotifyEvent,\n  QueryKey,\n  QueryOptions,\n  WithRequired,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (\n    error: DefaultError,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean\n  set: (queryHash: string, query: Query) => void\n  get: (queryHash: string) => Query | undefined\n  delete: (queryHash: string) => void\n  values: () => IterableIterator<Query>\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  #queries: QueryStore\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super()\n    this.#queries = new Map<string, Query>()\n  }\n\n  build<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    client: QueryClient,\n    options: WithRequired<\n      QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query)\n\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.#queries.get(query.queryHash)\n\n    if (queryInMap) {\n      query.destroy()\n\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash)\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.#queries.get(queryHash) as\n      | Query<TQueryFnData, TError, TData, TQueryKey>\n      | undefined\n  }\n\n  getAll(): Array<Query> {\n    return [...this.#queries.values()]\n  }\n\n  find<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData>(\n    filters: WithRequired<QueryFilters, 'queryKey'>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((query) =>\n      matchQuery(defaultedFilters, query),\n    ) as Query<TQueryFnData, TError, TData> | undefined\n  }\n\n  findAll(filters: QueryFilters<any> = {}): Array<Query> {\n    const queries = this.getAll()\n    return Object.keys(filters).length > 0\n      ? queries.filter((query) => matchQuery(filters, query))\n      : queries\n  }\n\n  notify(event: QueryCacheNotifyEvent): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Set<Mutation<any, any, any, any>>\n  #scopes: Map<string, Array<Mutation<any, any, any, any>>>\n  #mutationId: number\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = new Set()\n    this.#scopes = new Map()\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.add(mutation)\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const scopedMutations = this.#scopes.get(scope)\n      if (scopedMutations) {\n        scopedMutations.push(mutation)\n      } else {\n        this.#scopes.set(scope, [mutation])\n      }\n    }\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    if (this.#mutations.delete(mutation)) {\n      const scope = scopeFor(mutation)\n      if (typeof scope === 'string') {\n        const scopedMutations = this.#scopes.get(scope)\n        if (scopedMutations) {\n          if (scopedMutations.length > 1) {\n            const index = scopedMutations.indexOf(mutation)\n            if (index !== -1) {\n              scopedMutations.splice(index, 1)\n            }\n          } else if (scopedMutations[0] === mutation) {\n            this.#scopes.delete(scope)\n          }\n        }\n      }\n    }\n\n    // Currently we notify the removal even if the mutation was already removed.\n    // Consider making this an error or not notifying of the removal depending on the desired semantics.\n    this.notify({ type: 'removed', mutation })\n  }\n\n  canRun(mutation: Mutation<any, any, any, any>): boolean {\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const mutationsWithSameScope = this.#scopes.get(scope)\n      const firstPendingMutation = mutationsWithSameScope?.find(\n        (m) => m.state.status === 'pending',\n      )\n      // we can run if there is no current pending mutation (start use-case)\n      // or if WE are the first pending mutation (continue use-case)\n      return !firstPendingMutation || firstPendingMutation === mutation\n    } else {\n      // For unscoped mutations there are never any pending mutations in front of the\n      // current mutation\n      return true\n    }\n  }\n\n  runNext(mutation: Mutation<any, any, any, any>): Promise<unknown> {\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const foundMutation = this.#scopes\n        .get(scope)\n        ?.find((m) => m !== mutation && m.state.isPaused)\n\n      return foundMutation?.continue() ?? Promise.resolve()\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.notify({ type: 'removed', mutation })\n      })\n      this.#mutations.clear()\n      this.#scopes.clear()\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return Array.from(this.#mutations)\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    ) as Mutation<TData, TError, TVariables, TContext> | undefined\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused)\n\n    return notifyManager.batch(() =>\n      Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop)),\n      ),\n    )\n  }\n}\n\nfunction scopeFor(mutation: Mutation<any, any, any, any>) {\n  return mutation.options.scope?.id\n}\n","import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options as InfiniteQueryPageParamsOptions<TData>\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction\n      const oldPages = context.state.data?.pages || []\n      const oldPageParams = context.state.data?.pageParams || []\n      let result: InfiniteData<unknown> = { pages: [], pageParams: [] }\n      let currentPage = 0\n\n      const fetchFn = async () => {\n        let cancelled = false\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: OmitKeyof<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            client: context.client,\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch all pages\n          do {\n            const param =\n              currentPage === 0\n                ? (oldPageParams[0] ?? options.initialPageParam)\n                : getNextPageParam(options, result)\n            if (currentPage > 0 && param == null) {\n              break\n            }\n            result = await fetchPage(result, param)\n            currentPage++\n          } while (currentPage < remainingPages)\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              client: context.client,\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return pages.length > 0\n    ? options.getNextPageParam(\n        pages[lastIndex],\n        pages,\n        pageParams[lastIndex],\n        pageParams,\n      )\n    : undefined\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return pages.length > 0\n    ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams)\n    : undefined\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n","import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InferDataFromTag,\n  InferErrorFromTag,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching<TQueryFilters extends QueryFilters<any> = QueryFilters>(\n    filters?: TQueryFilters,\n  ): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating<\n    TMutationFilters extends MutationFilters<any, any> = MutationFilters,\n  >(filters?: TMutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n\n    return this.#queryCache.get(options.queryHash)?.state.data as\n      | TInferredQueryFnData\n      | undefined\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n    const query = this.#queryCache.build(this, defaultedOptions)\n    const cachedData = query.state.data\n\n    if (cachedData === undefined) {\n      return this.fetchQuery(options)\n    }\n\n    if (\n      options.revalidateIfStale &&\n      query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n    ) {\n      void this.prefetchQuery(defaultedOptions)\n    }\n\n    return Promise.resolve(cachedData)\n  }\n\n  getQueriesData<\n    TQueryFnData = unknown,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(filters: TQueryFilters): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): NoInfer<TInferredQueryFnData> | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<\n    TQueryFnData,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(\n    filters: TQueryFilters,\n    updater: Updater<\n      NoInfer<TQueryFnData> | undefined,\n      NoInfer<TQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n    TInferredError = InferErrorFromTag<TError, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TInferredError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TInferredError>(\n      options.queryHash,\n    )?.state\n  }\n\n  removeQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n  ): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    options?: ResetOptions,\n  ): Promise<void> {\n    const queryCache = this.#queryCache\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(\n        {\n          type: 'active',\n          ...filters,\n        },\n        options,\n      )\n    })\n  }\n\n  cancelQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: InvalidateQueryFilters<TTaggedQueryKey>,\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters?.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      return this.refetchQueries(\n        {\n          ...filters,\n          type: filters?.refetchType ?? filters?.type ?? 'active',\n        },\n        options,\n      )\n    })\n  }\n\n  refetchQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: RefetchQueryFilters<TTaggedQueryKey>,\n    options: RefetchOptions = {},\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    const result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): OmitKeyof<MutationObserverOptions<any, any, any, any>, 'mutationKey'> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    const result: OmitKeyof<\n      MutationObserverOptions<any, any, any, any>,\n      'mutationKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n","const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\nexport { Fetch, NodeXHR, XHR, NodeWebSocket, WebSocket, WebTransport, } from \"engine.io-client\";\n","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  noop,\n  notifyManager,\n  shouldThrowError,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key as keyof QueryObserverResult)\n        onPropTracked?.(key as keyof QueryObserverResult)\n        return Reflect.get(target, key)\n      },\n    })\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  const originalStaleTime = defaultedOptions.staleTime\n\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => Math.max(originalStaleTime(...args), 1000)\n        : Math.max(originalStaleTime ?? 1000, 1000)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  NoInfer,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, noop, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './IsRestoringProvider'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n","/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const queryFnContext: OmitKeyof<\n        QueryFunctionContext<TQueryKey>,\n        'signal'\n      > = {\n        client: this.#client,\n        queryKey: this.queryKey,\n        meta: this.meta,\n      }\n\n      addSignalProperty(queryFnContext)\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn as QueryFunction<any>,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext as QueryFunctionContext<TQueryKey>)\n    }\n\n    // Trigger behavior hook\n    const context: OmitKeyof<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      client: this.#client,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"],"names":["defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","onlineManager","isOnline","CancelledError","Error","constructor","options","super","this","revert","silent","isCancelledError","value","createRetryer","config","continueFn","isRetryCancelled","isResolved","thenable","pendingThenable","canContinue","focusManager","isFocused","canRun","canStart","resolve","_config$onSuccess","_continueFn","onSuccess","call","reject","_config$onError","_continueFn2","onError","pause","Promise","continueResolve","_config$onPause","onPause","then","_config$onContinue","onContinue","run","promiseOrValue","initialPromise","fn","error","catch","_config$retry","_config$retryDelay","_config$onFail","retry","isServer","retryDelay","delay","shouldRetry","onFail","sleep","promise","cancel","cancelOptions","_config$abort","abort","continue","_continueFn3","cancelRetry","continueRetry","start","_resolve","_reject","finalize","data","Object","assign","status","reason","Removable","_gcTimeout","WeakMap","_classPrivateFieldInitSpec","destroy","clearGcTimeout","scheduleGc","isValidTimeout","gcTime","_classPrivateFieldSet","setTimeout","optionalRemove","updateGcTime","newGcTime","max","Infinity","_classPrivateFieldGet","clearTimeout","window","globalThis","noop","functionalUpdate","updater","input","timeUntilStale","updatedAt","staleTime","Date","now","resolveStaleTime","query","resolveEnabled","enabled","matchQuery","filters","type","exact","fetchStatus","predicate","queryKey","stale","queryHash","hashQueryKeyByOptions","partialMatchKey","isActive","isStale","state","matchMutation","mutation","mutationKey","hashKey","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","key","a","b","every","replaceEqualDeep","array","isPlainArray","aItems","aSize","length","bItems","bSize","copy","equalItems","i","includes","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","getPrototypeOf","toString","timeout","replaceData","prevData","structuralSharing","addToEnd","items","item","arguments","undefined","newItems","slice","addToStart","skipToken","Symbol","ensureQueryFn","fetchOptions","queryFn","concat","shouldThrowError","throwOnError","params","defaultScheduler","cb","notifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","schedule","push","batch","flush","originalQueue","forEach","batchCalls","_len","args","_key","setNotifyFunction","setBatchNotifyFunction","setScheduler","createNotifyManager","Mutation","_observers","_mutationCache","_retryer","_Class_brand","WeakSet","_classPrivateMethodInitSpec","mutationId","mutationCache","context","failureReason","isPaused","variables","submittedAt","setOptions","meta","addObserver","observer","notify","removeObserver","filter","x","remove","_classPrivateFieldGet2","_classPrivateFieldGet3","execute","_this$options$retry","_assertClassBrand","_dispatch","mutationFn","restored","_classPrivateFieldGet6","_classPrivateFieldGet7","_this$options$onSucce","_this$options2","_classPrivateFieldGet8","_classPrivateFieldGet9","_this$options$onSettl","_this$options3","_classPrivateFieldGet4","_classPrivateFieldGet5","_this$options$onMutat","_this$options","onMutate","onSettled","_classPrivateFieldGet0","_classPrivateFieldGet1","_this$options$onError","_this$options4","_classPrivateFieldGet10","_classPrivateFieldGet11","_this$options$onSettl2","_this$options5","runNext","action","_objectSpread","reducer","onMutationUpdate","getDefaultState","_online","_cleanup","_setup","Subscribable","onOnline","addEventListener","onlineListener","offlineListener","removeEventListener","onSubscribe","setEventListener","onUnsubscribe","hasListeners","setup","setOnline","bind","online","listeners","listener","Set","subscribe","add","delete","size","_focused","onFocus","focused","setFocused","_globalThis$document","document","visibilityState","QueryCache","_queries","Map","build","client","_options$queryHash","get","Query","defaultQueryOptions","defaultOptions","getQueryDefaults","has","set","queryInMap","clear","getAll","values","find","defaultedFilters","findAll","queries","event","MutationCache","_mutations","_scopes","_mutationId","_this$mutationId","defaultMutationOptions","scope","scopeFor","scopedMutations","index","indexOf","splice","mutationsWithSameScope","firstPendingMutation","m","_foundMutation$contin","foundMutation","from","resumePausedMutations","pausedMutations","all","map","_mutation$options$sco","id","infiniteQueryBehavior","pages","onFetch","_context$fetchOptions","_context$state$data","_context$state$data2","direction","fetchMore","oldPages","oldPageParams","pageParams","currentPage","fetchFn","async","cancelled","fetchPage","param","previous","queryFnContext","pageParam","object","defineProperty","enumerable","signal","aborted","page","maxPages","addTo","oldData","getPreviousPageParam","getNextPageParam","remainingPages","_oldPageParams$","initialPageParam","persister","_context$options$pers","_context$options","_ref","lastIndex","_ref2","_options$getPreviousP","QueryClient","_queryCache","_defaultOptions","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","queryCache","mount","_this$mountCount","unmount","_this$mountCount3","isFetching","isMutating","getQueryData","ensureQueryData","defaultedOptions","cachedData","fetchQuery","revalidateIfStale","isStaleByTime","prefetchQuery","getQueriesData","setQueryData","setData","manual","setQueriesData","getQueryState","removeQueries","resetQueries","reset","refetchQueries","cancelQueries","defaultedCancelOptions","promises","invalidateQueries","_ref3","_filters$refetchType","invalidate","refetchType","_options$cancelRefetc","cancelRefetch","isDisabled","fetch","fetchInfiniteQuery","behavior","prefetchInfiniteQuery","ensureInfiniteQueryData","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","defaults","queryDefault","setMutationDefaults","getMutationDefaults","_defaulted","refetchOnReconnect","suspense","mutations","withNativeArrayBuffer","ArrayBuffer","withNativeBlob","Blob","withNativeFile","File","isBinary","obj","isView","buffer","hasBinary","toJSON","l","deconstructPacket","packet","buffers","packetData","pack","_deconstructPacket","attachments","placeholder","_placeholder","num","newData","reconstructPacket","_reconstructPacket","RESERVED_EVENTS","protocol","PacketType","Encoder","replacer","encode","EVENT","ACK","encodeAsString","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","str","deconstruction","unshift","isObject","Decoder","Emitter","reviver","reconstructor","decodeString","isBinaryEvent","BinaryReconstructor","emitReserved","base64","takeBinaryData","p","Number","charAt","buf","substring","next","c","payload","tryParse","substr","isPayloadValid","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","finishedReconstruction","reconPack","binData","on","ev","off","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","_autoConnect","open","disconnected","subEvents","subs","onopen","onpacket","onerror","onclose","active","_readyState","send","emit","apply","_a","_b","_c","_len2","_key2","retries","fromQueue","volatile","_addToQueue","compress","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","isConnected","_hasPingExpired","notifyOutgoingListeners","_this","ackTimeout","timer","setTimeoutFn","clearTimeoutFn","_len3","_key3","withError","emitWithAck","_len4","_key4","arg1","arg2","_this2","tryCount","pending","err","shift","_len5","responseArgs","_key5","_drainQueue","force","_packet","_sendConnectPacket","_pid","pid","offset","_lastOffset","description","_clearAcks","some","String","sid","onconnect","onevent","onack","ondisconnect","message","emitEvent","_anyListeners","self","sent","_len6","_key6","emitBuffered","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","Backoff","ms","factor","jitter","attempts","duration","pow","rand","random","deviation","floor","setMin","setMax","setJitter","Manager","uri","nsps","path","installTimerFunctions","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","_parser","parser","encoder","decoder","autoConnect","v","_reconnection","skipReconnect","_reconnectionAttempts","_reconnectionDelay","_randomizationFactor","_reconnectionDelayMax","_timeout","maybeReconnectOnOpen","_reconnecting","reconnect","Engine","socket","openSubDestroy","cleanup","errorSub","autoUnref","unref","onping","ondata","ondecoded","nextTick","_destroy","_close","encodedPackets","write","onreconnect","attempt","cache","lookup","parsed","loc","location","host","test","port","href","url","source","sameNamespace","forceNew","multiplex","MutationObserver","_client","_currentResult","_currentMutation","_mutateOptions","bindMethods","_updateResult","mutate","prevOptions","_notify","getCurrentResult","isPending","isSuccess","isError","isIdle","_classPrivateFieldGet12","_classPrivateFieldGet13","useMutation","queryClient","useQueryClient","React","onStoreChange","mutateOptions","mutateAsync","QueryObserver","_currentQuery","_currentQueryInitialState","_currentResultState","_currentResultOptions","_currentThenable","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","experimental_prefetchInRender","refetch","shouldFetchOnMount","_executeFetch","updateResult","_updateTimers","shouldFetchOnReconnect","shouldFetchOn","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout","_clearRefetchInterval","prevQuery","_updateQuery","mounted","shouldFetchOptionally","_updateStaleTimeout","nextRefetchInterval","_computeRefetchInterval","_updateRefetchInterval","getOptimisticResult","createResult","optimisticResult","shouldAssignObserverCurrentProperties","trackResult","onPropTracked","Proxy","target","trackProp","Reflect","getCurrentQuery","_objectDestructuringEmpty","fetchOptimistic","_fetchOptions$cancelR","prevResult","prevResultState","prevResultOptions","queryInitialState","newState","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","fetchState","errorUpdatedAt","skipSelect","placeholderData","select","selectError","isLoading","hasData","nextResult","isInitialLoading","dataUpdatedAt","fetchFailureCount","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","finalizeThenableIfPossible","recreateThenable","prevThenable","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","typedKey","onQueryUpdate","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","clearInterval","notifyOptions","retryOnMount","shouldLoadOnMount","refetchOnMount","field","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","getHasError","IsRestoringContext","useIsRestoring","ensureSuspenseTimers","Provider","originalStaleTime","willFetch","isRestoring","shouldSuspend","useQuery","Observer","_client$getDefaultOpt","_client$getDefaultOpt2","_client$getDefaultOpt3","_client$getDefaultOpt4","_experimental_beforeQuery","isNewCacheEntry","shouldSubscribe","subscribed","unsubscribe","_experimental_afterQuery","_client$getQueryCache","finally","useBaseQuery","QueryClientContext","QueryClientProvider","children","jsx","mixin","_callbacks","once","removeAllListeners","callbacks","len","_initialState","_revertState","_cache","_abortSignalConsumed","_config$state","observers","initialData","initialDataUpdatedAt","fetchMeta","isInvalidated","setState","setStateOptions","getObserversCount","_this$options$behavio","abortController","AbortController","addSignalProperty","_context$fetchOptions2","_action$meta","_action$dataUpdatedAt"],"sourceRoot":""}