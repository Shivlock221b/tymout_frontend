{"version":3,"file":"static/js/548.c96cb8e1.chunk.js","mappings":"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","sources":["message/services/chatApi.js","message/components/MessageItem.js","message/components/MessageList.js","message/components/MessageEmpty.js","message/components/MessageTagFilter.js","message/services/messagingService.js","stores/messagingStore.js","message/pages/MessageIndexPage.js","message/hooks/stores/useMessagingStoreHooks.js","message/hooks/queries/useMessagingQueries.js"],"sourcesContent":["import axios from 'axios';\n\n// Centralized axios instance for the one-on-one chat service\n// Use API gateway for all requests to maintain consistent routing\nconst API_BASE = process.env.REACT_APP_API_GATEWAY_URL || 'http://localhost:3000';\n\n// All chat endpoints will be under /api/chats path\nconst CHAT_ENDPOINT = `${API_BASE}/api/chats`;\n\nconsole.log('Chat API configured with endpoint:', CHAT_ENDPOINT);\n\nconst client = axios.create({\n  baseURL: CHAT_ENDPOINT,\n  withCredentials: true\n});\n\n/*\n-------------------------------------------------------------------\nchatApi – REST wrappers for one-on-one chat micro-service\n-------------------------------------------------------------------\nEach method returns the .data field directly for convenience.\n*/\n\nconst chatApi = {\n  // Fetch all chats for a user (chat previews)\n  getUserChats: async (userId) => {\n    const { data } = await client.get(`/user/${userId}`);\n    return data;\n  },\n\n  // Fetch a single chat (metadata + participants)\n  getChat: async (chatId) => {\n    const { data } = await client.get(`/${chatId}`);\n    return data;\n  },\n\n  // Fetch messages for a chat (supports pagination)\n  getMessages: async (chatId, { limit = 50, skip = 0 } = {}) => {\n    const { data } = await client.get(`/${chatId}/messages`, {\n      params: { limit, skip }\n    });\n    return data;\n  },\n\n  // Send a new message\n  sendMessage: async (payload) => {\n    // payload expects: { chatId, senderId, senderName, senderAvatar, text, replyTo?, clientMsgId? }\n    const { data } = await client.post('/message', payload);\n    return data;\n  },\n\n  // Mark all messages as read for a user in a chat\n  markAsRead: async (chatId, userId) => {\n    const { data } = await client.post(`/${chatId}/read`, { userId });\n    return data;\n  },\n\n  // Get chat preview with unread count\n  getChatPreview: async (chatId, userId) => {\n    const { data } = await client.get(`/${chatId}/preview`, { params: { userId } });\n    return data;\n  },\n\n  // Update chat block status\n  updateChatStatus: async (chatId, { isBlocked, blockedBy }) => {\n    const { data } = await client.patch(`/${chatId}/status`, { isBlocked, blockedBy });\n    return data;\n  },\n\n  // Create or fetch a direct chat between two users\n  startDirectChat: async (userAId, userBId, userAName, userBName, userAAvatar, userBAvatar) => {\n    const { data } = await client.post('/direct', { \n      userAId, \n      userBId,\n      userAName,\n      userBName,\n      userAAvatar,\n      userBAvatar\n    });\n    return data;\n  }\n};\n\nexport default chatApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { format, isToday, isYesterday } from 'date-fns';\nimport { FaComment } from 'react-icons/fa';\n\n/**\n * MessageItem Component\n * \n * Following Single Responsibility Principle:\n * - This component is only responsible for rendering a single message thread item\n * - It displays the user avatar, name, last message, timestamp, and unread count\n */\nconst MessageItem = ({ thread, onClick }) => {\n  const { name, avatar, lastMessage, timestamp, unread, online, tags } = thread;\n  \n  // Format the timestamp\n  const messageDate = new Date(timestamp);\n  let formattedTime;\n  \n  if (isToday(messageDate)) {\n    formattedTime = format(messageDate, 'h:mm a');\n  } else if (isYesterday(messageDate)) {\n    formattedTime = 'Yesterday';\n  } else {\n    formattedTime = format(messageDate, 'MMM d');\n  }\n  \n  // Get tag styling\n  const getTagStyle = (tag) => {\n    const styles = {\n      Events: 'bg-blue-50 text-blue-700 border-blue-200',\n      Circle: 'bg-amber-50 text-amber-700 border-amber-200',\n      Private: 'bg-purple-50 text-purple-700 border-purple-200'\n    };\n    \n    return styles[tag] || 'bg-gray-50 text-gray-700 border-gray-200';\n  };\n  \n  // Get the tag (should be a single tag now)\n  const tag = tags && tags.length > 0 ? tags[0] : null;\n  \n  return (\n    <div \n      className=\"p-3 cursor-pointer transition-all duration-300 hover:shadow-md rounded-xl m-2 bg-white border border-gray-100\"\n      onClick={onClick}\n    >\n      <div className=\"flex items-center gap-3\">\n        {/* Avatar with online indicator */}\n        <div className=\"relative flex-shrink-0\">\n          <img \n            src={avatar || 'https://via.placeholder.com/48?text=U'} \n            alt={`${name}'s avatar`}\n            className=\"w-12 h-12 rounded-lg object-cover shadow-sm border border-gray-200 bg-gray-50\"\n            onError={(e) => {\n              e.target.onerror = null;\n              e.target.src = 'https://via.placeholder.com/48?text=U';\n            }}\n          />\n          {online && (\n            <span className=\"absolute -bottom-1 -right-1 w-3.5 h-3.5 bg-green-500 rounded-full border-2 border-white\"></span>\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 min-w-0 py-1\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"font-semibold text-gray-900 truncate\">{name}</h3>\n            <span className=\"text-xs text-gray-500 whitespace-nowrap ml-2\">{formattedTime}</span>\n          </div>\n          \n          <p className=\"text-sm text-gray-600 line-clamp-1 mt-0.5\">{lastMessage}</p>\n          \n          <div className=\"flex justify-between items-center mt-1\">\n            {/* Tag (single) */}\n            {tag && (\n              <span className={`inline-block px-2 py-0.5 text-xs rounded-full font-medium border ${getTagStyle(tag)}`}>\n                {tag}\n              </span>\n            )}\n            \n            {/* Unread count */}\n            {unread > 0 ? (\n              <div className=\"flex items-center gap-1\">\n                <FaComment className=\"text-indigo-500\" />\n                <span className=\"flex h-5 w-5 items-center justify-center rounded-full bg-indigo-600 text-xs font-medium text-white\">\n                  {unread}\n                </span>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-1 text-gray-400\">\n                <FaComment />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMessageItem.propTypes = {\n  thread: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    lastMessage: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired,\n    unread: PropTypes.number,\n    online: PropTypes.bool,\n    tags: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default MessageItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport MessageItem from './MessageItem';\n\n/**\n * MessageList Component\n * \n * Following Single Responsibility Principle:\n * - This component is only responsible for rendering a list of message threads\n * - Each message item is handled by a specialized MessageItem component\n */\nconst MessageList = ({ threads }) => {\n  const navigate = useNavigate();\n  \n  const handleThreadClick = (threadId) => {\n    navigate(`/messages/${threadId}`);\n  };\n  \n  return (\n    <div className=\"divide-y\">\n      {threads.map(thread => (\n        <MessageItem \n          key={thread.id}\n          thread={thread}\n          onClick={() => handleThreadClick(thread.id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nMessageList.propTypes = {\n  threads: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      avatar: PropTypes.string,\n      lastMessage: PropTypes.string.isRequired,\n      timestamp: PropTypes.string.isRequired,\n      unread: PropTypes.number,\n      online: PropTypes.bool,\n      tags: PropTypes.arrayOf(PropTypes.string)\n    })\n  ).isRequired\n};\n\nexport default MessageList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FaInbox, FaSearch, FaTags } from 'react-icons/fa';\n\n/**\n * MessageEmpty Component\n * \n * Following Single Responsibility Principle:\n * - This component is only responsible for displaying an empty state\n * - It adapts its content based on whether there's a search term, tag filters, or just empty\n */\nconst MessageEmpty = ({ searchTerm, selectedTags, showTablePrompt }) => {\n  // Determine which empty state to show based on filters\n  const hasSearchTerm = searchTerm && searchTerm.trim() !== '';\n  const hasTagFilters = selectedTags === true;\n\n  if (hasSearchTerm && hasTagFilters) {\n    // Both search term and tag filters applied\n    return (\n      <div className=\"text-center py-16\">\n        <FaSearch className=\"mx-auto text-gray-400 text-4xl mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No matching results</h3>\n        <p className=\"text-gray-500\">\n          We couldn't find any messages matching \"{searchTerm}\" with the selected tags\n        </p>\n      </div>\n    );\n  } else if (hasSearchTerm) {\n    // Only search term applied\n    return (\n      <div className=\"text-center py-16\">\n        <FaSearch className=\"mx-auto text-gray-400 text-4xl mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No results found</h3>\n        <p className=\"text-gray-500\">\n          We couldn't find any messages matching \"{searchTerm}\"\n        </p>\n      </div>\n    );\n  } else if (hasTagFilters) {\n    // Only tag filters applied\n    if (showTablePrompt === 'Table') {\n      return (\n        <div className=\"text-center py-16\">\n          <FaTags className=\"mx-auto text-blue-400 text-4xl mb-4\" />\n          <h3 className=\"text-lg font-medium text-blue-900 mb-2\">No tables yet</h3>\n          <p className=\"text-blue-700\">\n            Join your first table at Tymout or host your own table to start connecting with others!\n          </p>\n        </div>\n      );\n    }\n    if (showTablePrompt === 'Circle') {\n      return (\n        <div className=\"text-center py-16\">\n          <FaTags className=\"mx-auto text-amber-400 text-4xl mb-4\" />\n          <h3 className=\"text-lg font-medium text-amber-900 mb-2\">No circles yet</h3>\n          <p className=\"text-amber-700\">\n            Join your first circle at Tymout or create your own circle to meet new people!\n          </p>\n        </div>\n      );\n    }\n    if (showTablePrompt === 'Hostings') {\n      return (\n        <div className=\"text-center py-16\">\n          <FaTags className=\"mx-auto text-teal-400 text-4xl mb-4\" />\n          <h3 className=\"text-lg font-medium text-teal-900 mb-2\">No hostings yet</h3>\n          <p className=\"text-teal-700\">\n            Host your first event on Tymout!\n          </p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"text-center py-16\">\n        <FaTags className=\"mx-auto text-gray-400 text-4xl mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No messages with selected tags</h3>\n        <p className=\"text-gray-500\">\n          Try selecting different tags or clear the filters\n        </p>\n      </div>\n    );\n  } else {\n    // No messages at all\n    return (\n      <div className=\"text-center py-16\">\n        <FaInbox className=\"mx-auto text-gray-400 text-4xl mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No messages yet</h3>\n        <p className=\"text-gray-500\">\n          When you connect with others, your conversations will appear here\n        </p>\n      </div>\n    );\n  }\n};\n\nMessageEmpty.propTypes = {\n  searchTerm: PropTypes.string,\n  selectedTags: PropTypes.bool,\n  showTablePrompt: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string\n  ])\n};\n\nMessageEmpty.defaultProps = {\n  searchTerm: '',\n  selectedTags: false,\n  showTablePrompt: false\n};\n\nexport default MessageEmpty;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * MessageTagFilter Component\n * \n * Following Single Responsibility Principle:\n * - This component is only responsible for rendering tag filter buttons\n * - It handles the visual presentation and interaction for tag filtering\n */\nconst MessageTagFilter = ({ availableTags, selectedTag, onTagSelect, onClearFilter }) => {\n  // Get tag-specific styling\n  const getTagStyles = (tag) => {\n    const isSelected = selectedTag === tag;\n    \n    const baseStyles = {\n      Table: {\n        bg: isSelected ? 'bg-blue-500' : 'bg-blue-50',\n        text: isSelected ? 'text-white' : 'text-blue-700',\n        hover: 'hover:bg-blue-100',\n        border: isSelected ? 'border-blue-500' : 'border-blue-200'\n      },\n      Circle: {\n        bg: isSelected ? 'bg-amber-500' : 'bg-amber-50',\n        text: isSelected ? 'text-white' : 'text-amber-700',\n        hover: 'hover:bg-amber-100',\n        border: isSelected ? 'border-amber-500' : 'border-amber-200'\n      },\n      Private: {\n        bg: isSelected ? 'bg-purple-500' : 'bg-purple-50',\n        text: isSelected ? 'text-white' : 'text-purple-700',\n        hover: 'hover:bg-purple-100',\n        border: isSelected ? 'border-purple-500' : 'border-purple-200'\n      },\n      Notification: {\n        bg: isSelected ? 'bg-green-500' : 'bg-green-50',\n        text: isSelected ? 'text-white' : 'text-green-700',\n        hover: 'hover:bg-green-100',\n        border: isSelected ? 'border-green-500' : 'border-green-200'\n      },\n      Hostings: {\n        bg: isSelected ? 'bg-teal-500' : 'bg-teal-50',\n        text: isSelected ? 'text-white' : 'text-teal-700',\n        hover: 'hover:bg-teal-100',\n        border: isSelected ? 'border-teal-500' : 'border-teal-200'\n      },\n      Archieve: {\n        bg: isSelected ? 'bg-gray-700' : 'bg-gray-100',\n        text: isSelected ? 'text-white' : 'text-gray-700',\n        hover: 'hover:bg-gray-200',\n        border: isSelected ? 'border-gray-700' : 'border-gray-200'\n      }\n    };\n    \n    const styles = baseStyles[tag] || {\n      bg: isSelected ? 'bg-gray-500' : 'bg-gray-50',\n      text: isSelected ? 'text-white' : 'text-gray-700',\n      hover: 'hover:bg-gray-100',\n      border: isSelected ? 'border-gray-500' : 'border-gray-200'\n    };\n    \n    return `${styles.bg} ${styles.text} ${isSelected ? '' : styles.hover} border ${styles.border}`;\n  };\n  \n  // Always show these default tags\n  const defaultTags = [\"Table\", \"Circle\", \"Hostings\", \"Archieve\"];\n  // Merge default tags with availableTags, avoiding duplicates\n  const mergedTags = Array.from(new Set([...defaultTags, ...availableTags]));\n\n  // Check if there are any threads with the 'Table' tag\n  const hasTableThreads = availableTags.includes('Table');\n\n  return (\n    <div className=\"mb-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h2 className=\"text-sm font-medium text-gray-700\">Filter by category</h2>\n        {selectedTag && (\n          <button \n            onClick={onClearFilter}\n            className=\"text-xs text-indigo-600 hover:text-indigo-800\"\n          >\n            Clear filter\n          </button>\n        )}\n      </div>\n      \n      <div className=\"flex flex-wrap gap-2\">\n        {mergedTags.map((tag) => (\n          <button\n            key={tag}\n            onClick={() => onTagSelect(tag)}\n            className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors duration-150 ${getTagStyles(tag)}`}\n          >\n            {tag}\n          </button>\n        ))}\n      </div>\n\n    </div>\n  );\n};\n\nMessageTagFilter.propTypes = {\n  availableTags: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedTag: PropTypes.string,\n  onTagSelect: PropTypes.func.isRequired,\n  onClearFilter: PropTypes.func.isRequired\n};\n\nMessageTagFilter.defaultProps = {\n  selectedTag: null\n};\n\nexport default MessageTagFilter;\n","\n\nimport chatApi from './chatApi';\nimport { useAuthStore } from '../../stores/authStore';\n\n// Keep mock data as fallback if API fails\n// TODO: Move this placeholder to @data directory and import here as per project rules.\nconst mockThreadsData = [\n  {\n    id: 'thread1',\n    name: 'John Smith',\n    avatar: 'https://randomuser.me/api/portraits/men/32.jpg',\n    lastMessage: 'Hey, are you available for a call today?',\n    timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(), // 15 minutes ago\n    unread: 2,\n    online: true,\n    tags: ['Private']\n  },\n  {\n    id: 'thread2',\n    name: 'Sarah Johnson',\n    avatar: 'https://randomuser.me/api/portraits/women/44.jpg',\n    lastMessage: 'The documents have been sent to your email',\n    timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(), // 1 hour ago\n    unread: 0,\n    online: false,\n    tags: ['Work']\n  },\n  {\n    id: 'thread3',\n    name: 'Tech Support',\n    avatar: 'https://randomuser.me/api/portraits/men/22.jpg',\n    lastMessage: 'Your ticket #45678 has been resolved',\n    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3).toISOString(), // 3 hours ago\n    unread: 1,\n    online: true,\n    tags: ['Support']\n  },\n  {\n    id: 'thread4',\n    name: 'Event Planning Team',\n    avatar: 'https://randomuser.me/api/portraits/women/28.jpg',\n    lastMessage: 'We need to finalize the venue by tomorrow',\n    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago\n    unread: 0,\n    online: false,\n    tags: ['Table']\n  },\n  {\n    id: 'thread5',\n    name: 'David Wilson',\n    avatar: 'https://randomuser.me/api/portraits/men/42.jpg',\n    lastMessage: 'Looking forward to meeting you at the event!',\n    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 48).toISOString(), // 2 days ago\n    unread: 0,\n    online: true,\n    tags: ['Circle']\n  }\n];\n\n// Mock data for message details\nconst mockDetailData = {\n  thread1: {\n    id: 'thread1',\n    name: 'John Smith',\n    avatar: 'https://randomuser.me/api/portraits/men/32.jpg',\n    online: true,\n    messages: [\n      {\n        id: 'msg1',\n        threadId: 'thread1',\n        senderId: 'john',\n        senderName: 'John Smith',\n        content: 'Hi there! How are you doing today?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n        status: 'read'\n      },\n      {\n        id: 'msg2',\n        threadId: 'thread1',\n        senderId: 'current_user',\n        senderName: 'You',\n        content: 'I\\'m doing well, thanks for asking! How about you?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\n        status: 'read'\n      },\n      {\n        id: 'msg3',\n        threadId: 'thread1',\n        senderId: 'john',\n        senderName: 'John Smith',\n        content: 'Great! I was wondering if you\\'re available for a call today?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(),\n        status: 'delivered'\n      },\n      {\n        id: 'msg4',\n        threadId: 'thread1',\n        senderId: 'john',\n        senderName: 'John Smith',\n        content: 'I need to discuss some details about the project.',\n        timestamp: new Date(Date.now() - 1000 * 60 * 14).toISOString(),\n        status: 'delivered'\n      }\n    ]\n  },\n  thread2: {\n    id: 'thread2',\n    name: 'Sarah Johnson',\n    avatar: 'https://randomuser.me/api/portraits/women/44.jpg',\n    online: false,\n    messages: [\n      {\n        id: 'msg5',\n        threadId: 'thread2',\n        senderId: 'current_user',\n        senderName: 'You',\n        content: 'Hi Sarah, could you send me the documents we discussed yesterday?',\n        timestamp: new Date(Date.now() - 1000 * 60 * 90).toISOString(),\n        status: 'read'\n      },\n      {\n        id: 'msg6',\n        threadId: 'thread2',\n        senderId: 'sarah',\n        senderName: 'Sarah Johnson',\n        content: 'Sure, I\\'ll get those to you right away.',\n        timestamp: new Date(Date.now() - 1000 * 60 * 70).toISOString(),\n        status: 'read'\n      },\n      {\n        id: 'msg7',\n        threadId: 'thread2',\n        senderId: 'sarah',\n        senderName: 'Sarah Johnson',\n        content: 'The documents have been sent to your email',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n        status: 'read'\n      }\n    ]\n  }\n};\n\n/**\n * MessageService\n * \n * Following Single Responsibility Principle:\n * - This service is responsible for all messaging related API calls and WebSocket interactions\n * - Each method handles a specific messaging operation\n */\nconst messagingService = {\n  /**\n   * Get all message threads for the current user\n   * @returns {Promise<Array>} Message threads\n   */\n  getMessageThreads: async () => {\n    try {\n      // Get current user from auth store\n      const currentUser = useAuthStore.getState().user;\n      if (!currentUser || !currentUser._id) {\n        console.error('User not authenticated, using mock data');\n        return mockThreadsData;\n      }\n\n      console.log('Fetching chats for user:', currentUser._id);\n      \n      // Fetch chats from API\n      const chats = await chatApi.getUserChats(currentUser._id);\n      console.log('Received chats from API:', chats);\n      \n      // If no chats or empty array, return mock data\n      if (!chats || !Array.isArray(chats) || chats.length === 0) {\n        console.log('No chats found, using mock data');\n        return mockThreadsData;\n      }\n      \n      // Transform chat data to match the expected format for message threads\n      return chats.map(chat => {\n        // Check if the response is in the expected format from chatController\n        if (chat.otherUser) {\n          // Format from chatController.getUserChats\n          return {\n            id: chat.chatId,\n            name: chat.otherUser.name || 'User',\n            avatar: chat.otherUser.avatar || 'https://via.placeholder.com/48?text=U',\n            lastMessage: chat.lastMessage?.text || 'No messages yet',\n            timestamp: chat.lastMessage?.timestamp || chat.lastActivity || new Date().toISOString(),\n            unread: chat.unreadCount || 0,\n            online: false, // We don't have real-time online status yet\n            tags: ['Private']\n          };\n        } else {\n          // Alternative format - find other participant manually\n          const otherParticipant = chat.participants?.find(p => p.userId !== currentUser._id) || chat.participants?.[0] || {};\n          const lastMsg = chat.lastMessage || {};\n          \n          return {\n            id: chat.chatId || chat._id,\n            name: otherParticipant.name || 'User',\n            avatar: otherParticipant.avatar || 'https://via.placeholder.com/48?text=U',\n            lastMessage: lastMsg.text || 'No messages yet',\n            timestamp: lastMsg.timestamp || lastMsg.createdAt || new Date().toISOString(),\n            unread: chat.unreadCount || 0,\n            online: otherParticipant.online || false,\n            tags: ['Private']\n          };\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching message threads:', error);\n      // Return mock data as fallback\n      console.log('Using mock data as fallback due to error');\n      return mockThreadsData;\n    }\n  },\n  \n  /**\n   * Get messages for a specific thread\n   * @param {string} threadId - Thread ID\n   * @returns {Promise<Object>} Thread details with messages\n   */\n  getThreadMessages: async (threadId) => {\n    try {\n      // Get current user from auth store\n      const currentUser = useAuthStore.getState().user;\n      if (!currentUser || !currentUser._id) {\n        throw new Error('User not authenticated');\n      }\n\n      // Fetch chat details and messages\n      const [chat, messagesData] = await Promise.all([\n        chatApi.getChat(threadId),\n        chatApi.getMessages(threadId)\n      ]);\n      \n      // Find the other participant\n      const otherParticipant = chat.participants.find(p => p.userId !== currentUser._id) || chat.participants[0] || {};\n      \n      // Mark messages as read\n      chatApi.markAsRead(threadId, currentUser._id).catch(err => {\n        console.error('Error marking messages as read:', err);\n      });\n      \n      // Return formatted thread data\n      return {\n        id: chat.chatId || chat._id,\n        name: otherParticipant.name || 'User',\n        avatar: otherParticipant.avatar || 'https://via.placeholder.com/48?text=U',\n        online: otherParticipant.online || false,\n        messages: messagesData.map(msg => ({\n          id: msg._id,\n          threadId,\n          senderId: msg.senderId,\n          senderName: msg.senderName,\n          content: msg.text,\n          timestamp: msg.timestamp || msg.createdAt,\n          status: msg.status || 'sent'\n        }))\n      };\n    } catch (error) {\n      console.error(`Error fetching messages for thread ${threadId}:`, error);\n      // Try to use mock data as fallback\n      const mockThread = mockDetailData[threadId];\n      if (mockThread) {\n        console.log('Using mock data as fallback');\n        return mockThread;\n      }\n      throw error;\n    }\n  },\n  \n  /**\n   * Send a message to a thread\n   * @param {string} threadId - Thread ID\n   * @param {string} content - Message content\n   * @returns {Promise<Object>} Sent message\n   */\n  sendMessage: async (threadId, content) => {\n    try {\n      // Get current user from auth store\n      const currentUser = useAuthStore.getState().user;\n      if (!currentUser || !currentUser._id) {\n        throw new Error('User not authenticated');\n      }\n      \n      // Send message using chat API\n      const payload = {\n        chatId: threadId,\n        senderId: currentUser._id,\n        senderName: currentUser.name || currentUser.username || 'You',\n        senderAvatar: currentUser.profileImage || '',\n        text: content,\n        clientMsgId: `msg_${Date.now()}`\n      };\n      \n      const savedMessage = await chatApi.sendMessage(payload);\n      \n      // Return formatted message\n      return {\n        id: savedMessage._id,\n        threadId,\n        senderId: currentUser._id,\n        senderName: 'You',\n        content: savedMessage.text,\n        timestamp: savedMessage.timestamp || savedMessage.createdAt,\n        status: savedMessage.status || 'sent'\n      };\n    } catch (error) {\n      console.error(`Error sending message to thread ${threadId}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Mark a thread as read\n   * @param {string} threadId - Thread ID\n   * @returns {Promise<Object>} Updated thread\n   */\n  markThreadAsRead: async (threadId) => {\n    try {\n      // Get current user from auth store\n      const currentUser = useAuthStore.getState().user;\n      if (!currentUser || !currentUser._id) {\n        throw new Error('User not authenticated');\n      }\n      \n      // Mark messages as read using chat API\n      const result = await chatApi.markAsRead(threadId, currentUser._id);\n      return { threadId, success: true, ...result };\n    } catch (error) {\n      console.error(`Error marking thread ${threadId} as read:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Initialize WebSocket connection for real-time messaging\n   * @param {Function} onMessageReceived - Callback for new messages\n   * @param {Function} onTypingStatus - Callback for typing status updates\n   * @param {Function} onThreadUpdated - Callback for thread updates\n   * @returns {Object} WebSocket controller\n   */\n  initializeWebSocket: (onMessageReceived, onTypingStatus, onThreadUpdated) => {\n    // In a production app, this would create a real WebSocket connection\n    console.log('WebSocket connection initialized (mock)');\n    \n    // Setup mock WebSocket message simulation\n    const mockWsController = {\n      isConnected: true,\n      \n      // Simulate sending typing status\n      sendTypingStatus: (threadId, isTyping) => {\n        console.log(`Mock WS: Sending typing status: ${isTyping} for thread ${threadId}`);\n      },\n      \n      // Disconnect the WebSocket\n      disconnect: () => {\n        console.log('Mock WS: Disconnected');\n        mockWsController.isConnected = false;\n      }\n    };\n    \n    // Return the controller for later use\n    return mockWsController;\n  }\n};\n\nexport default messagingService;\n","import { create } from 'zustand';\nimport { createStore } from './middleware';\n\n/**\n * Messaging UI store for managing client-side messaging state\n * Following Single Responsibility Principle - this store only handles UI state for messaging\n */\nexport const useMessagingStore = create(\n  createStore('messaging', (set, get) => ({\n    // Active thread ID\n    activeThreadId: null,\n    \n    // UI state for conversation\n    uiState: {\n      isMessagePanelOpen: false,\n      showTagFilter: true,\n      isTyping: {},  // Maps threadId -> boolean\n      draft: {},     // Maps threadId -> draft message content\n      searchTerm: '',\n      selectedTag: 'Table', // Default to Table tag\n    },\n    \n    // Set active thread ID\n    setActiveThreadId: (threadId) => \n      set({ activeThreadId: threadId }),\n    \n    // Toggle message panel open/closed\n    toggleMessagePanel: () => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          isMessagePanelOpen: !state.uiState.isMessagePanelOpen \n        } \n      })),\n    \n    // Toggle tag filter visibility\n    toggleTagFilter: () => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          showTagFilter: !state.uiState.showTagFilter \n        } \n      })),\n    \n    // Set typing status for a thread\n    setTypingStatus: (threadId, isTyping) => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          isTyping: { \n            ...state.uiState.isTyping, \n            [threadId]: isTyping \n          } \n        } \n      })),\n    \n    // Update draft message for a thread\n    updateDraft: (threadId, content) => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          draft: { \n            ...state.uiState.draft, \n            [threadId]: content \n          } \n        } \n      })),\n    \n    // Clear draft message for a thread\n    clearDraft: (threadId) => \n      set((state) => {\n        const newDraft = { ...state.uiState.draft };\n        delete newDraft[threadId];\n        \n        return { \n          uiState: { \n            ...state.uiState, \n            draft: newDraft\n          } \n        };\n      }),\n    \n    // Set search term\n    setSearchTerm: (term) => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          searchTerm: term \n        } \n      })),\n    \n    // Set selected tag\n    setSelectedTag: (tag) => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          selectedTag: tag \n        } \n      })),\n    \n    // Clear selected tag\n    clearSelectedTag: () => \n      set((state) => ({ \n        uiState: { \n          ...state.uiState, \n          selectedTag: null \n        } \n      }))\n  }))\n);\n","import React, { useMemo, useEffect, useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport MessageList from '../components/MessageList';\nimport MessageEmpty from '../components/MessageEmpty';\nimport MessageTagFilter from '../components/MessageTagFilter';\nimport { useMessageThreads } from '../hooks/queries/useMessagingQueries';\nimport { useMessageFilters } from '../hooks/stores/useMessagingStoreHooks';\nimport chatApi from '../services/chatApi';\nimport { useAuthStore } from '../../stores/authStore';\n\n/**\n * MessageIndexPage Component\n * \n * Main page component for displaying user's message threads\n * Following Single Responsibility Principle:\n * - UI state managed by Zustand\n * - Server data fetching handled by React Query\n * - Rendering logic delegated to specialized components\n */\nconst MessageIndexPage = () => {\n  // Use Zustand store for UI state\n  const { \n    searchTerm, \n    setSearchTerm, \n    selectedTag, \n    setSelectedTag, \n    clearSelectedTag,\n    showTagFilter\n  } = useMessageFilters();\n  \n  // Get current user from auth store\n  const currentUser = useAuthStore(state => state.user);\n  \n  // Local state for real chat data\n  const [realThreads, setRealThreads] = useState([]);\n  const [isLoadingReal, setIsLoadingReal] = useState(true);\n  \n  // Use React Query for data fetching (as fallback)\n  const { \n    data: mockThreads = [], \n    isLoading: isLoadingMock \n  } = useMessageThreads();\n  \n  // Directly fetch real chat data\n  useEffect(() => {\n    const fetchRealChats = async () => {\n      if (!currentUser || !currentUser._id) {\n        console.log('No user found, using mock data');\n        setIsLoadingReal(false);\n        return;\n      }\n      \n      try {\n        setIsLoadingReal(true);\n        console.log('Fetching real chats for user:', currentUser._id);\n        \n        const chats = await chatApi.getUserChats(currentUser._id);\n        console.log('Received real chats:', chats);\n        \n        if (!chats || !Array.isArray(chats) || chats.length === 0) {\n          console.log('No real chats found');\n          setRealThreads([]);\n          setIsLoadingReal(false);\n          return;\n        }\n        \n        // Transform chat data to match the expected format\n        const formattedThreads = chats.map(chat => {\n          // Check if the response is in the expected format from chatController\n          if (chat.otherUser) {\n            // Format from chatController.getUserChats\n            return {\n              id: chat.chatId,\n              name: chat.otherUser.name || 'User',\n              avatar: chat.otherUser.avatar || 'https://via.placeholder.com/48?text=U',\n              lastMessage: chat.lastMessage?.text || 'No messages yet',\n              timestamp: chat.lastMessage?.timestamp || chat.lastActivity || new Date().toISOString(),\n              unread: chat.unreadCount || 0,\n              online: false,\n              tags: ['Private']\n            };\n          } else {\n            // Alternative format - find other participant manually\n            const otherParticipant = chat.participants?.find(p => p.userId !== currentUser._id) || chat.participants?.[0] || {};\n            const lastMsg = chat.lastMessage || {};\n            \n            return {\n              id: chat.chatId || chat._id,\n              name: otherParticipant.name || 'User',\n              avatar: otherParticipant.avatar || 'https://via.placeholder.com/48?text=U',\n              lastMessage: lastMsg.text || 'No messages yet',\n              timestamp: lastMsg.timestamp || lastMsg.createdAt || new Date().toISOString(),\n              unread: chat.unreadCount || 0,\n              online: otherParticipant.online || false,\n              tags: ['Private']\n            };\n          }\n        });\n        \n        setRealThreads(formattedThreads);\n      } catch (error) {\n        console.error('Error fetching real chats:', error);\n        setRealThreads([]);\n      } finally {\n        setIsLoadingReal(false);\n      }\n    };\n    \n    fetchRealChats();\n  }, [currentUser]);\n  \n  // Combine real and mock threads, prioritizing real data\n  const threads = realThreads.length > 0 ? realThreads : mockThreads;\n  const isLoading = isLoadingReal || isLoadingMock;\n  \n  // Extract all unique tags from threads and order them \n  const availableTags = useMemo(() => {\n    const allTags = threads\n      .filter(thread => thread.tags && Array.isArray(thread.tags))\n      .flatMap(thread => thread.tags);\n    \n    const uniqueTags = [...new Set(allTags)];\n    \n    // Define desired order\n    const tagOrder = ['Table', 'Circle', 'Private', 'Notification', 'Hostings'];\n    \n    // Sort tags according to desired order\n    return uniqueTags.sort((a, b) => {\n      const indexA = tagOrder.indexOf(a);\n      const indexB = tagOrder.indexOf(b);\n      \n      // If both tags are in the order array, sort by their position\n      if (indexA !== -1 && indexB !== -1) {\n        return indexA - indexB;\n      }\n      \n      // If only a is in the order array, it comes first\n      if (indexA !== -1) {\n        return -1;\n      }\n      \n      // If only b is in the order array, it comes first\n      if (indexB !== -1) {\n        return 1;\n      }\n      \n      // If neither tag is in the order array, maintain alphabetical order\n      return a.localeCompare(b);\n    });\n  }, [threads]);\n  \n  // Handle tag selection\n  const handleTagSelect = (tag) => {\n    setSelectedTag(tag);\n  };\n  \n  // Clear selected tag\n  const handleClearFilter = () => {\n    clearSelectedTag();\n  };\n  \n  // Filter threads based on search term and selected tag\n  const filteredThreads = useMemo(() => {\n    return threads.filter(thread => {\n      // Text search filter\n      const matchesSearch = \n        thread.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        thread.lastMessage.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      // Tag filter\n      const matchesTag = \n        !selectedTag || // If no tag selected, show all\n        (thread.tags && thread.tags.includes(selectedTag));\n      \n      return matchesSearch && matchesTag;\n    });\n  }, [threads, searchTerm, selectedTag]);\n  \n  return (\n    <div className=\"flex flex-col min-h-screen bg-gray-50 overflow-x-hidden max-w-full\">\n      <div className=\"container mx-auto px-4 pb-20 pt-4 md:pt-6 md:pb-6 flex-grow overflow-x-hidden\">\n        {/* Page Header */}\n        <div className=\"bg-white p-4 rounded-lg shadow-sm mb-4\">\n          <h1 className=\"text-2xl font-bold\">Messages</h1>\n        </div>\n      \n        {/* Search bar */}\n        <div className=\"relative mb-4 bg-white p-4 rounded-lg shadow-sm\">\n          <input\n            type=\"text\"\n            placeholder=\"Search messages...\"\n            className=\"w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n          <FaSearch className=\"absolute left-7 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n        </div>\n        \n        {/* Tag filters */}\n        {!isLoading && showTagFilter && (\n          <div className=\"bg-white p-4 rounded-lg shadow-sm mb-4\">\n            <MessageTagFilter\n              availableTags={availableTags}\n              selectedTag={selectedTag}\n              onTagSelect={handleTagSelect}\n              onClearFilter={handleClearFilter}\n            />\n          </div>\n        )}\n      \n        {/* Message threads */}\n        <div className=\"bg-white rounded-lg shadow-sm overflow-hidden p-2\">\n          {isLoading ? (\n            <div className=\"p-4 space-y-4\">\n              {[...Array(5)].map((_, index) => (\n                <div key={index} className=\"animate-pulse\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"rounded-full bg-gray-200 h-12 w-12\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                    <div className=\"h-3 bg-gray-200 rounded w-12\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredThreads.length > 0 ? (\n            <MessageList threads={filteredThreads} />\n          ) : (\n            <MessageEmpty\n  searchTerm={searchTerm}\n  selectedTags={!!selectedTag}\n  showTablePrompt={\n    (['Table', 'Circle', 'Hostings'].includes(selectedTag) && filteredThreads.length === 0)\n      ? selectedTag\n      : false\n  }\n/>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MessageIndexPage;\n","import { useMessagingStore } from '../../../stores/messagingStore';\nimport { useMemo } from 'react';\n\n/**\n * Custom hook for messaging thread selection and navigation\n * Follows Interface Segregation Principle by exposing only thread selection related state and actions\n * Uses useMemo to maintain stable object references and prevent re-renders\n * \n * @returns {Object} Thread selection state and functions\n */\nexport const useThreadSelection = () => {\n  // Select individual primitives/functions to prevent unnecessary re-renders\n  const activeThreadId = useMessagingStore(state => state.activeThreadId);\n  const setActiveThreadId = useMessagingStore(state => state.setActiveThreadId);\n  const isMessagePanelOpen = useMessagingStore(state => state.uiState.isMessagePanelOpen);\n  const toggleMessagePanel = useMessagingStore(state => state.toggleMessagePanel);\n  \n  // Return stable object with useMemo\n  return useMemo(() => ({\n    activeThreadId,\n    setActiveThreadId,\n    isMessagePanelOpen,\n    toggleMessagePanel\n  }), [activeThreadId, setActiveThreadId, isMessagePanelOpen, toggleMessagePanel]);\n};\n\n/**\n * Custom hook for messaging UI filters\n * Follows Interface Segregation Principle by exposing only filter related state and actions\n * Uses useMemo to maintain stable object references and prevent re-renders\n * \n * @returns {Object} Filter state and functions\n */\nexport const useMessageFilters = () => {\n  // Select individual primitives/functions to prevent unnecessary re-renders\n  const searchTerm = useMessagingStore(state => state.uiState.searchTerm);\n  const setSearchTerm = useMessagingStore(state => state.setSearchTerm);\n  const selectedTag = useMessagingStore(state => state.uiState.selectedTag);\n  const setSelectedTag = useMessagingStore(state => state.setSelectedTag);\n  const clearSelectedTag = useMessagingStore(state => state.clearSelectedTag);\n  const showTagFilter = useMessagingStore(state => state.uiState.showTagFilter);\n  const toggleTagFilter = useMessagingStore(state => state.toggleTagFilter);\n  \n  // Return stable object with useMemo\n  return useMemo(() => ({\n    searchTerm,\n    setSearchTerm,\n    selectedTag,\n    setSelectedTag,\n    clearSelectedTag,\n    showTagFilter,\n    toggleTagFilter\n  }), [searchTerm, setSearchTerm, selectedTag, setSelectedTag, clearSelectedTag, showTagFilter, toggleTagFilter]);\n};\n\n/**\n * Custom hook for conversation UI state\n * Follows Interface Segregation Principle by exposing only conversation related state and actions\n * Uses useMemo to maintain stable object references and prevent re-renders\n * \n * @param {string} threadId - Thread ID for the conversation\n * @returns {Object} Conversation UI state and functions\n */\nexport const useConversationState = (threadId) => {\n  // Select individual primitives/functions to prevent unnecessary re-renders\n  const isTyping = useMessagingStore(state => state.uiState.isTyping[threadId] || false);\n  const setTypingStatus = useMessagingStore(state => (isTyping) => state.setTypingStatus(threadId, isTyping));\n  const draft = useMessagingStore(state => state.uiState.draft[threadId] || '');\n  const updateDraft = useMessagingStore(state => (content) => state.updateDraft(threadId, content));\n  const clearDraft = useMessagingStore(state => () => state.clearDraft(threadId));\n  \n  // Return stable object with useMemo\n  return useMemo(() => ({\n    isTyping,\n    setTypingStatus,\n    draft,\n    updateDraft,\n    clearDraft\n  }), [isTyping, setTypingStatus, draft, updateDraft, clearDraft]);\n};\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useEffect, useRef } from 'react';\nimport messagingService from '../../services/messagingService';\n\n/**\n * Custom hook for fetching message threads\n * Following Single Responsibility Principle and Interface Segregation Principle\n * \n * @param {Object} options - React Query options\n * @returns {Object} - React Query result object\n */\nexport const useMessageThreads = (options = {}) => {\n  return useQuery({\n    queryKey: ['messageThreads'],\n    queryFn: messagingService.getMessageThreads,\n    staleTime: 30 * 1000, // 30 seconds\n    ...options\n  });\n};\n\n/**\n * Custom hook for fetching thread messages\n * \n * @param {string} threadId - Thread ID\n * @param {Object} options - React Query options\n * @returns {Object} - React Query result object\n */\nexport const useThreadMessages = (threadId, options = {}) => {\n  return useQuery({\n    queryKey: ['threadMessages', threadId],\n    queryFn: () => messagingService.getThreadMessages(threadId),\n    enabled: !!threadId,\n    staleTime: 10 * 1000, // 10 seconds\n    ...options\n  });\n};\n\n/**\n * Custom hook for sending messages\n * \n * @returns {Object} - React Query mutation object\n */\nexport const useSendMessage = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ threadId, content }) => \n      messagingService.sendMessage(threadId, content),\n    \n    // When mutate is called:\n    onMutate: async ({ threadId, content }) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['threadMessages', threadId] });\n      \n      // Snapshot the previous value\n      const previousMessages = queryClient.getQueryData(['threadMessages', threadId]);\n      \n      // Optimistically update the UI\n      queryClient.setQueryData(['threadMessages', threadId], old => {\n        if (!old || !old.messages) return old;\n        \n        const optimisticMessage = {\n          id: `temp_${Date.now()}`,\n          threadId,\n          senderId: 'current_user',\n          senderName: 'You',\n          content,\n          timestamp: new Date().toISOString(),\n          status: 'sending'\n        };\n        \n        return {\n          ...old,\n          messages: [...old.messages, optimisticMessage]\n        };\n      });\n      \n      // Return the snapshot for rollback\n      return { previousMessages };\n    },\n    \n    // If the mutation fails, roll back\n    onError: (err, { threadId }, context) => {\n      queryClient.setQueryData(\n        ['threadMessages', threadId],\n        context.previousMessages\n      );\n    },\n    \n    // Always refetch after error or success\n    onSettled: (_, __, { threadId }) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['threadMessages', threadId] \n      });\n    }\n  });\n};\n\n/**\n * Custom hook for marking a thread as read\n * \n * @returns {Object} - React Query mutation object\n */\nexport const useMarkThreadAsRead = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (threadId) => messagingService.markThreadAsRead(threadId),\n    \n    // When mutate is called:\n    onMutate: async (threadId) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['messageThreads'] });\n      \n      // Snapshot the previous value\n      const previousThreads = queryClient.getQueryData(['messageThreads']);\n      \n      // Optimistically update the UI\n      queryClient.setQueryData(['messageThreads'], old => {\n        if (!old) return old;\n        \n        return old.map(thread => {\n          if (thread.id === threadId) {\n            return { ...thread, unread: 0 };\n          }\n          return thread;\n        });\n      });\n      \n      // Return the snapshot for rollback\n      return { previousThreads };\n    },\n    \n    // If the mutation fails, roll back\n    onError: (err, threadId, context) => {\n      queryClient.setQueryData(['messageThreads'], context.previousThreads);\n    },\n    \n    // Always refetch after error or success\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: ['messageThreads'] });\n    }\n  });\n};\n\n/**\n * Custom hook for real-time WebSocket integration with React Query\n * \n * @param {string} activeThreadId - Currently active thread ID\n * @returns {Object} - WebSocket controller\n */\nexport const useMessageWebSocket = (activeThreadId) => {\n  const queryClient = useQueryClient();\n  const wsRef = useRef(null);\n  \n  useEffect(() => {\n    // Initialize WebSocket connection\n    wsRef.current = messagingService.initializeWebSocket(\n      // Handle new message received\n      (message) => {\n        // Update thread messages if it's the active thread\n        if (message.threadId === activeThreadId) {\n          queryClient.setQueryData(['threadMessages', activeThreadId], old => {\n            if (!old || !old.messages) return old;\n            return {\n              ...old,\n              messages: [...old.messages, message]\n            };\n          });\n        }\n        \n        // Update threads list to show the new message\n        queryClient.setQueryData(['messageThreads'], old => {\n          if (!old) return old;\n          \n          return old.map(thread => {\n            if (thread.id === message.threadId) {\n              return { \n                ...thread, \n                lastMessage: message.content,\n                timestamp: message.timestamp,\n                unread: thread.id !== activeThreadId ? (thread.unread || 0) + 1 : 0\n              };\n            }\n            return thread;\n          });\n        });\n      },\n      \n      // Handle typing status updates\n      (threadId, isTyping) => {\n        // No need to update cache, this is handled by the Zustand store\n      },\n      \n      // Handle thread updates (e.g., read status)\n      (updatedThread) => {\n        queryClient.setQueryData(['messageThreads'], old => {\n          if (!old) return old;\n          \n          return old.map(thread => {\n            if (thread.id === updatedThread.id) {\n              return { ...thread, ...updatedThread };\n            }\n            return thread;\n          });\n        });\n      }\n    );\n    \n    // Clean up WebSocket connection on unmount\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.disconnect();\n        wsRef.current = null;\n      }\n    };\n  }, [queryClient, activeThreadId]);\n  \n  // Typing status function\n  const sendTypingStatus = (isTyping) => {\n    if (wsRef.current && activeThreadId) {\n      wsRef.current.sendTypingStatus(activeThreadId, isTyping);\n    }\n  };\n  \n  return {\n    sendTypingStatus,\n    isConnected: wsRef.current?.isConnected || false\n  };\n};\n"],"names":["CHAT_ENDPOINT","concat","process","client","axios","create","baseURL","withCredentials","getUserChats","async","data","get","userId","getChat","chatId","getMessages","limit","skip","arguments","length","undefined","params","sendMessage","post","payload","markAsRead","getChatPreview","updateChatStatus","_ref","isBlocked","blockedBy","patch","startDirectChat","userAId","userBId","userAName","userBName","userAAvatar","userBAvatar","thread","onClick","name","avatar","lastMessage","timestamp","unread","online","tags","messageDate","Date","formattedTime","isToday","format","isYesterday","tag","_jsx","className","children","_jsxs","src","alt","onError","e","target","onerror","Events","Circle","Private","getTagStyle","FaComment","threads","navigate","useNavigate","map","MessageItem","handleThreadClick","threadId","id","MessageEmpty","searchTerm","selectedTags","showTablePrompt","hasSearchTerm","trim","hasTagFilters","FaSearch","FaTags","FaInbox","defaultProps","MessageTagFilter","availableTags","selectedTag","onTagSelect","onClearFilter","getTagStyles","isSelected","styles","Table","bg","text","hover","border","Notification","Hostings","Archieve","mergedTags","Array","from","Set","includes","mockThreadsData","now","toISOString","mockDetailData","thread1","messages","senderId","senderName","content","status","thread2","getMessageThreads","currentUser","useAuthStore","getState","user","_id","chats","chatApi","isArray","chat","_chat$lastMessage","_chat$lastMessage2","otherUser","lastActivity","unreadCount","_chat$participants","_chat$participants2","otherParticipant","participants","find","p","lastMsg","createdAt","error","getThreadMessages","Error","messagesData","Promise","all","catch","err","msg","mockThread","username","senderAvatar","profileImage","clientMsgId","savedMessage","markThreadAsRead","result","_objectSpread","success","initializeWebSocket","onMessageReceived","onTypingStatus","onThreadUpdated","mockWsController","isConnected","sendTypingStatus","isTyping","disconnect","useMessagingStore","createStore","set","activeThreadId","uiState","isMessagePanelOpen","showTagFilter","draft","setActiveThreadId","toggleMessagePanel","state","toggleTagFilter","setTypingStatus","updateDraft","clearDraft","newDraft","setSearchTerm","term","setSelectedTag","clearSelectedTag","MessageIndexPage","useMessageFilters","useMemo","realThreads","setRealThreads","useState","isLoadingReal","setIsLoadingReal","mockThreads","isLoading","isLoadingMock","options","useQuery","queryKey","queryFn","messagingService","staleTime","useMessageThreads","useEffect","formattedThreads","fetchRealChats","allTags","filter","flatMap","uniqueTags","tagOrder","sort","a","b","indexA","indexOf","indexB","localeCompare","filteredThreads","matchesSearch","toLowerCase","matchesTag","type","placeholder","value","onChange","handleClearFilter","_","index","MessageList"],"sourceRoot":""}