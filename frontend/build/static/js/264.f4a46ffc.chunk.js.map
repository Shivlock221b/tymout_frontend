{"version":3,"file":"static/js/264.f4a46ffc.chunk.js","mappings":"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","sources":["hooks/queries/useProfileQueries.js","hooks/queries/useUserHostedEvents.js","components/profile/UserDetails.js","components/profile/UserInterests.js","components/profile/ProfileCompleteness.js","components/profile/VerificationBadges.js","components/profile/ProfileAvatar.js","pages/ProfilePage.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport profileService from '../../services/profileService';\n\n/**\n * Hook to fetch the current user's profile\n * @param {Object} options - Additional React Query options\n * @returns {Object} Query result containing profile data, loading and error states\n */\nexport const useProfile = (options = {}) => {\n  return useQuery({\n    queryKey: ['profile'],\n    queryFn: profileService.getProfile,\n    staleTime: 300000, // 5 minutes\n    cacheTime: 600000, // 10 minutes\n    ...options\n  });\n};\n\n/**\n * Hook to fetch a user profile by ID\n * @param {string} userId - User ID to fetch profile for\n * @param {Object} options - Additional React Query options\n * @returns {Object} Query result containing profile data, loading and error states\n */\nexport const useProfileById = (userId, options = {}) => {\n  return useQuery({\n    queryKey: ['profile', userId],\n    queryFn: () => profileService.getProfileById(userId),\n    staleTime: 300000, // 5 minutes\n    cacheTime: 600000, // 10 minutes\n    enabled: !!userId, // Only run query if userId is provided\n    ...options\n  });\n};\n\n/**\n * Hook to update the current user's profile\n * @returns {Object} Mutation object with mutate function and state\n */\nexport const useUpdateProfile = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: profileService.updateProfile,\n    // When mutation is successful, invalidate the profile cache\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['profile'] });\n      queryClient.invalidateQueries({ queryKey: ['profile', data.id] });\n    }\n  });\n};\n\n/**\n * Hook to update user preferences\n * @returns {Object} Mutation object with mutate function and state\n */\nexport const useUpdatePreferences = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: profileService.updatePreferences,\n    // When mutation is successful, invalidate the profile cache\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['profile'] });\n    }\n  });\n};\n","import { useQuery } from '@tanstack/react-query';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Custom hook to fetch events hosted by a specific user\r\n * @param {string} userId - The ID of the user whose hosted events to fetch\r\n * @returns {Object} Query result with data, isLoading, and error\r\n */\r\nexport const useUserHostedEvents = (userId) => {\r\n  return useQuery({\r\n    queryKey: ['userHostedEvents', userId],\r\n    queryFn: async () => {\r\n      try {\r\n        // Get the API URL from environment variables or use default\r\n        const apiUrl = process.env.REACT_APP_EVENT_SERVICE_URL || 'http://localhost:3002';\r\n        \r\n        // Make the API request to fetch events hosted by the user\r\n        const response = await axios.get(`${apiUrl}/events/host/${userId}`);\r\n        \r\n        // Log the response for debugging\r\n        console.log('User hosted events response:', response.data);\r\n        \r\n        // Return the events data\r\n        return response.data.data || [];\r\n      } catch (error) {\r\n        console.error('Error fetching user hosted events:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    enabled: !!userId, // Only run the query if userId is provided\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n","import React from 'react';\n\n// Single Responsibility Principle - this component only handles displaying user details\nconst UserDetails = ({ bio, location }) => {\n  return (\n    <dl className=\"divide-y divide-gray-200\">\n      <div className=\"py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n        <dt className=\"text-sm font-medium text-gray-500\">Location</dt>\n        <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{location || 'Not specified'}</dd>\n      </div>\n      <div className=\"py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n        <dt className=\"text-sm font-medium text-gray-500\">Bio</dt>\n        <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\" style={{ whiteSpace: 'pre-wrap' }}>{bio || 'No bio added yet'}</dd>\n      </div>\n    </dl>\n  );\n};\n\nexport default UserDetails;\n","import React from 'react';\n\n// Single Responsibility Principle - this component only handles displaying user interests\nconst UserInterests = ({ interests = [] }) => {\n  return (\n    <div className=\"py-4 sm:py-5 sm:px-6\">\n      <dt className=\"text-sm font-medium text-gray-500 mb-2\">Interests</dt>\n      <dd className=\"mt-1 text-sm text-gray-900\">\n        {interests.length === 0 ? (\n          <p className=\"text-gray-500 italic\">No interests added yet</p>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {interests.map((interest, index) => (\n              <span \n                key={index} \n                className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800\"\n              >\n                {interest}\n              </span>\n            ))}\n          </div>\n        )}\n      </dd>\n    </div>\n  );\n};\n\nexport default UserInterests;\n","import React from 'react';\n\n// Single Responsibility Principle - this component only handles displaying profile completeness\nconst ProfileCompleteness = ({ completeness = 0 }) => {\n  return (\n    <div className=\"bg-gray-50 px-4 py-3 sm:px-6\">\n      <div className=\"flex flex-col\">\n        <div className=\"flex justify-between items-center mb-1\">\n          <span className=\"text-sm font-medium text-gray-500\">Profile Completeness</span>\n          <span className=\"text-sm font-medium text-gray-700\">{completeness}%</span>\n        </div>\n        <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n          <div \n            className=\"bg-indigo-600 h-2.5 rounded-full\" \n            style={{ width: `${completeness}%` }}\n          ></div>\n        </div>\n        {completeness < 100 && (\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Complete your profile to get more matches!\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileCompleteness;\n","import React from 'react';\n\n// Single Responsibility Principle - this component only handles displaying verification badges\nconst VerificationBadges = ({ verified = {} }) => {\n  return (\n    <div className=\"py-4 sm:py-5 sm:px-6\">\n      <dt className=\"text-sm font-medium text-gray-500 mb-2\">Verification</dt>\n      <dd className=\"mt-1 text-sm text-gray-900\">\n        <div className=\"flex flex-wrap gap-3\">\n          <div className=\"flex items-center\">\n            <span className={`mr-2 h-5 w-5 flex items-center justify-center rounded-full ${verified.email ? 'bg-green-100' : 'bg-gray-100'}`}>\n              {verified.email ? (\n                <svg className=\"h-3.5 w-3.5 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n              ) : (\n                <svg className=\"h-3.5 w-3.5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              )}\n            </span>\n            <span className={`${verified.email ? 'text-green-700' : 'text-gray-500'}`}>\n              Email {verified.email ? 'Verified' : 'Not Verified'}\n            </span>\n          </div>\n\n          <div className=\"flex items-center\">\n            <span className={`mr-2 h-5 w-5 flex items-center justify-center rounded-full ${verified.phone ? 'bg-green-100' : 'bg-gray-100'}`}>\n              {verified.phone ? (\n                <svg className=\"h-3.5 w-3.5 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n              ) : (\n                <svg className=\"h-3.5 w-3.5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              )}\n            </span>\n            <span className={`${verified.phone ? 'text-green-700' : 'text-gray-500'}`}>\n              Phone {verified.phone ? 'Verified' : 'Not Verified'}\n            </span>\n          </div>\n        </div>\n      </dd>\n    </div>\n  );\n};\n\nexport default VerificationBadges;\n","import React from 'react';\n\n// Single Responsibility Principle - this component only handles displaying profile avatar\nconst ProfileAvatar = ({ avatar, name, email, profileImage }) => {\n  // Default avatar if none provided\n  const defaultAvatar = 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80';\n  \n  // Get initials from name for fallback\n  const getInitials = (fullName) => {\n    if (!fullName) return '?';\n    \n    const names = fullName.split(' ');\n    if (names.length >= 2) {\n      return `${names[0].charAt(0)}${names[names.length - 1].charAt(0)}`.toUpperCase();\n    }\n    return fullName.charAt(0).toUpperCase();\n  };\n\n  return (\n    <div className=\"flex items-center py-4 sm:py-5 sm:px-6 border-b border-gray-200\">\n      {/* Avatar image or fallback */}\n      <div className=\"relative mr-4\">\n        {profileImage ? (\n          <img\n            src={profileImage}\n            alt={`${name}'s profile`}\n            className=\"h-16 w-16 rounded-full object-cover border-2 border-white shadow-sm\"\n          />\n        ) : avatar ? (\n          <img\n            src={avatar}\n            alt={`${name}'s profile`}\n            className=\"h-16 w-16 rounded-full object-cover border-2 border-white shadow-sm\"\n          />\n        ) : (\n          <div className=\"h-16 w-16 rounded-full flex items-center justify-center bg-indigo-100 text-indigo-800 text-xl font-bold border-2 border-white shadow-sm\">\n            {getInitials(name)}\n          </div>\n        )}\n        <div className=\"absolute bottom-0 right-0 h-4 w-4 bg-green-500 rounded-full border-2 border-white\"></div>\n      </div>\n      \n      {/* Name and status */}\n      <div>\n        <h2 className=\"text-lg font-bold text-gray-900\">{name || 'User'}</h2>\n        <p className=\"text-sm text-gray-500\">{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileAvatar;\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useProfile } from '../hooks/queries/useProfileQueries';\r\nimport { useLogout } from '../hooks/queries/useAuthQueries';\r\nimport { useUserHostedEvents } from '../hooks/queries/useUserHostedEvents';\r\nimport UserDetails from '../components/profile/UserDetails';\r\nimport UserInterests from '../components/profile/UserInterests';\r\nimport ProfileCompleteness from '../components/profile/ProfileCompleteness';\r\nimport VerificationBadges from '../components/profile/VerificationBadges';\r\nimport ProfileAvatar from '../components/profile/ProfileAvatar';\r\nimport SkeletonLoader from '../components/ui/SkeletonLoader';\r\nimport UniversalEventCard from '../components/common/EventCard';\r\nimport { FaCalendarAlt } from 'react-icons/fa';\r\n\r\n// Following Single Responsibility Principle - this component only handles the profile page layout\r\nconst ProfilePage = () => {\r\n  const { data: profile, isLoading: loading, error, refetch: refreshProfile } = useProfile();\r\n  const { mutate: logout } = useLogout();\r\n  const navigate = useNavigate();\r\n  \r\n  // Fetch events hosted by the current user\r\n  const {\r\n    data: hostedEvents = [],\r\n    isLoading: eventsLoading,\r\n    error: eventsError\r\n  } = useUserHostedEvents(profile?._id);\r\n  \r\n  if (loading) {\r\n    return <SkeletonLoader type=\"mainProfile\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-white\">\r\n        <div className=\"p-8 bg-white shadow-md rounded-lg\">\r\n          <h2 className=\"text-2xl font-bold mb-4 text-center text-red-500\">{error.message || 'Error loading profile'}</h2>\r\n          <div className=\"flex justify-center mt-4\">\r\n            <button \r\n              onClick={() => refreshProfile()}\r\n              className=\"px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    if (window.confirm('Are you sure you want to sign out?')) {\r\n      logout();\r\n      navigate('/'); // Redirect to home page after logout\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white\">\r\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\r\n          {profile && (\r\n            <div className=\"px-6 py-6\">\r\n              <ProfileAvatar \r\n                avatar={profile.avatar} \r\n                name={profile.name} \r\n                email={profile.email}\r\n                profileImage={profile.profileImage}\r\n              />\r\n              \r\n              <ProfileCompleteness completeness={profile.completeness} />\r\n              \r\n              <UserDetails \r\n                name={profile.name} \r\n                email={profile.email} \r\n                bio={profile.bio}\r\n                location={profile.location}\r\n              />\r\n              \r\n              <VerificationBadges verified={profile.verified} />\r\n              \r\n              <UserInterests interests={profile.interests} />\r\n              \r\n              {/* Hosted Events Section */}\r\n              <div className=\"border-t border-gray-200 pt-6 mt-6\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Events Hosted</h3>\r\n                \r\n                {eventsLoading ? (\r\n                  <div className=\"animate-pulse space-y-4 py-1\">\r\n                    <div className=\"h-40 bg-gray-200 rounded w-full\"></div>\r\n                    <div className=\"h-40 bg-gray-200 rounded w-full\"></div>\r\n                  </div>\r\n                ) : eventsError ? (\r\n                  <div className=\"text-center py-8 text-gray-500\">\r\n                    <FaCalendarAlt className=\"mx-auto text-gray-300 text-4xl mb-3\" />\r\n                    <p>Error loading events</p>\r\n                  </div>\r\n                ) : hostedEvents.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-gray-500\">\r\n                    <FaCalendarAlt className=\"mx-auto text-gray-300 text-4xl mb-3\" />\r\n                    <p>No events hosted yet</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                    {hostedEvents.map(event => {\r\n                      // Format the date for display\r\n                      const formattedDate = event.date && event.date.start ? \r\n                        new Date(event.date.start).toLocaleDateString() : 'Date not specified';\r\n                      \r\n                      return (\r\n                        <div key={event._id || event.id} className=\"overflow-hidden\">\r\n                          <UniversalEventCard\r\n                            item={{\r\n                              ...event,\r\n                              id: event._id || event.id, // Ensure ID is properly set\r\n                              date: formattedDate // Format date as string\r\n                            }}\r\n                            type=\"event\"\r\n                            source=\"profile\"\r\n                            fullWidth={true}\r\n                            variant=\"explore\"\r\n                            hideHeader={true} // Hide the host header\r\n                            disableNavigation={true} // Make the card non-clickable\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Action Buttons */}\r\n              <div className=\"border-t border-gray-200 pt-6 mt-6\">\r\n                <div className=\"flex justify-center space-x-4\">\r\n                  <button\r\n                    onClick={() => window.location.href = '/settings'}\r\n                    className=\"px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                  >\r\n                    Edit Profile\r\n                  </button>\r\n                  <button\r\n                    onClick={handleLogout}\r\n                    className=\"px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                  >\r\n                    Sign Out\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n"],"names":["useProfile","options","arguments","length","undefined","useQuery","_objectSpread","queryKey","queryFn","profileService","getProfile","staleTime","cacheTime","useProfileById","userId","getProfileById","enabled","useUserHostedEvents","async","apiUrl","process","axios","get","concat","data","error","refetchOnWindowFocus","_ref","bio","location","_jsxs","className","children","_jsx","style","whiteSpace","interests","map","interest","index","completeness","width","verified","email","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","phone","avatar","name","profileImage","src","alt","fullName","names","split","charAt","toUpperCase","getInitials","ProfilePage","profile","isLoading","loading","refetch","refreshProfile","mutate","logout","useLogout","navigate","useNavigate","hostedEvents","eventsLoading","eventsError","_id","SkeletonLoader","type","message","onClick","ProfileAvatar","ProfileCompleteness","UserDetails","VerificationBadges","UserInterests","FaCalendarAlt","event","formattedDate","date","start","Date","toLocaleDateString","UniversalEventCard","item","id","source","fullWidth","variant","hideHeader","disableNavigation","window","href","handleLogout","confirm"],"sourceRoot":""}